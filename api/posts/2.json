{"total":23,"pageSize":5,"pageCount":5,"data":[{"title":"V3指令集","slug":"UBOOT/V3指令集","date":"2018-05-26T03:54:32.000Z","updated":"2018-09-15T04:18:36.196Z","comments":true,"path":"api/articles/UBOOT/V3指令集.json","excerpt":"<p>汇编的阅读是一个非常枯燥乏味的过程，并且每个不同的芯片都有不同的汇编语言，一切以手册为准。</p>","keywords":null,"cover":null,"content":null,"text":"汇编的阅读是一个非常枯燥乏味的过程，并且每个不同的芯片都有不同的汇编语言，一切以手册为准。J (Jump)类型<br>32-bit Baseline语法J   imm24s目的<br>1<br>PC = PC + SE(imm24s &lt;&lt; 1);<br>J8 (Jum","link":"","raw":null,"photos":[],"categories":[{"name":"汇编","slug":"汇编","count":2,"path":"api/categories/汇编.json"}],"tags":[{"name":"指令集","slug":"指令集","count":1,"path":"api/tags/指令集.json"}]},{"title":"bootrom流程","slug":"UBOOT/BOOTROM流程","date":"2018-05-23T05:34:06.000Z","updated":"2018-09-15T04:26:59.792Z","comments":true,"path":"api/articles/UBOOT/BOOTROM流程.json","excerpt":"<p>BootRom是固化在芯片内部的一段代码，用于引导启动UBOOT，是开机启动的最重要阶段。</p>","keywords":null,"cover":null,"content":null,"text":"BootRom是固化在芯片内部的一段代码，用于引导启动UBOOT，是开机启动的最重要阶段。1.首先判断boot的启动模式（BOOTMODE_BASE   0X00 60 18 08 ）<br>  取低二位返回（三种模式两位数据即可）当模式为3时 启用FLASH_BOOT<br>1","link":"","raw":null,"photos":[],"categories":[{"name":"bootrom","slug":"bootrom","count":2,"path":"api/categories/bootrom.json"}],"tags":[{"name":"bootrom","slug":"bootrom","count":3,"path":"api/tags/bootrom.json"}]},{"title":"模拟实现DNS解析过程","slug":"项目/应用层/DNS Project","date":"2018-05-20T08:41:20.000Z","updated":"2018-07-26T03:55:52.047Z","comments":true,"path":"api/articles/项目/应用层/DNS Project.json","excerpt":"<p><strong> 主要知识点：</strong></p>\n<ol>\n<li><a href=\"http://www.xker.com/page/e2008/0418/52162.html\" target=\"_blank\" rel=\"noopener\">Linux 环境下的 Socket 编程</a></li>\n<li><a href=\"http://blog.csdn.net/crazw/article/details/8986504\" target=\"_blank\" rel=\"noopener\">DNS 解析过程详解</a></li>\n<li><a href=\"https://blog.csdn.net/tianxuhong/article/details/74922454\" target=\"_blank\" rel=\"noopener\">DNS报文解析</a>","keywords":null,"cover":null,"content":null,"text":" 主要知识点：Linux 环境下的 Socket 编程DNS 解析过程详解DNS报文解析","link":"","raw":null,"photos":[],"categories":[{"name":"DNS","slug":"DNS","count":1,"path":"api/categories/DNS.json"}],"tags":[{"name":"Socket","slug":"Socket","count":1,"path":"api/tags/Socket.json"}]},{"title":"电子纸驱动的编写","slug":"项目/底层/电子纸驱动","date":"2018-05-10T06:00:15.000Z","updated":"2018-05-29T13:54:53.240Z","comments":true,"path":"api/articles/项目/底层/电子纸驱动.json","excerpt":"<p><strong> “十三五“规划提出大数据概念无疑将推动物联网的进程，互联网+的口号提出将为更多的设备加入网络提供政策支持，绿色环保也在其中，具备超低功耗特性的微控制器也将大展宏图。ST目前一共推出三个超低功耗系列的MCU：STM32L0(Cortex-M0/M0+)、STM32L1（Cortex-M3）、STM32L4(Cortex-M4)。STM32L0系列STM32微控制器让客户能够取得前所未有的低功耗，整合高能效的ARM Cortex®-M0+内核、优化架构、电源管理模式、超低功耗外设、支持节能型USB功能、独有的超低功耗制造工艺。</strong><br>","keywords":null,"cover":"https://wx1.sinaimg.cn/mw690/0079ID0Dly1frkatehzeij31kw16oqv8.jpg","content":null,"text":" “十三五“规划提出大数据概念无疑将推动物联网的进程，互联网+的口号提出将为更多的设备加入网络提供政策支持，绿色环保也在其中，具备超低功耗特性的微控制器也将大展宏图。ST目前一共推出三个超低功耗系列的MCU：STM32L0(Cortex-M0/M0+)、STM32L1（Corte","link":"","raw":null,"photos":[],"categories":[{"name":"电子纸","slug":"电子纸","count":1,"path":"api/categories/电子纸.json"}],"tags":[{"name":"STM32","slug":"STM32","count":1,"path":"api/tags/STM32.json"}]},{"title":"ARM_02_环境搭建","slug":"ARM/ARM_02","date":"2018-02-03T05:35:42.000Z","updated":"2018-06-06T12:02:20.345Z","comments":true,"path":"api/articles/ARM/ARM_02.json","excerpt":"<p><strong>1 交叉编译工具的安装</strong> √<br><strong>2 编译Uboot</strong> √<br><strong>3 安装Kermit</strong> √<br><strong>4 Minicom</strong> √<br><strong>5 Uboot的命令</strong> √<br><strong>6 Dnw工具的安装</strong> √<br><strong>7 往Emmc烧写Uboot</strong> √</p>","keywords":null,"cover":"https://wx4.sinaimg.cn/mw690/0079ID0Dly1frzifvzrz0j30bq09ngnl.jpg","content":null,"text":"1 交叉编译工具的安装 √<br>2 编译Uboot √<br>3 安装Kermit √<br>4 Minicom √<br>5 Uboot的命令 √<br>6 Dnw工具的安装 √<br>7 往Emmc烧写Uboot √一. 交叉编译工具的安装安装交叉编译工具到/opt解压ta","link":"","raw":null,"photos":[],"categories":[{"name":"嵌入式","slug":"嵌入式","count":3,"path":"api/categories/嵌入式.json"}],"tags":[{"name":"ARM","slug":"ARM","count":3,"path":"api/tags/ARM.json"}]}]}