{"total":29,"pageSize":5,"pageCount":6,"data":[{"title":"06_C++引用","slug":"C++/06_C++引用","date":"2017-04-16T11:15:29.000Z","updated":"2018-05-06T16:25:46.920Z","comments":true,"path":"api/articles/C++/06_C++引用.json","excerpt":"<p><strong>1 引用（普通引用）</strong> √<br><strong>2 常引用</strong> √<br><strong>3 const引用结论</strong> √<br><strong>4 const修饰类</strong> √<br><strong>5 综合练习</strong> √<br>","keywords":null,"cover":null,"content":null,"text":"1 引用（普通引用） √<br>2 常引用 √<br>3 const引用结论 √<br>4 const修饰类 √<br>5 综合练习 √<br>一. 引用（普通引用）变量名回顾<br>变量名实质上是一段连续存储空间的别名，是一个标号(门牌号)<br>程序中通过变量来申请并命名内存","link":"","raw":null,"photos":[],"categories":[{"name":"面向对象编程","slug":"面向对象编程","count":8,"path":"api/categories/面向对象编程.json"}],"tags":[{"name":"Cpp对C的扩展","slug":"Cpp对C的扩展","count":8,"path":"api/tags/Cpp对C的扩展.json"}]},{"title":"05_C与C++中的const","slug":"C++/05_C与C++中的const ","date":"2017-04-15T09:16:24.000Z","updated":"2018-05-06T16:26:04.163Z","comments":true,"path":"api/articles/C++/05_C与C++中的const .json","excerpt":"<p><strong>1 const基础知识（用法、含义、好处）</strong> √<br><strong>2 C中“冒牌货”</strong> √<br><strong>3 const和#define相同之处</strong> √<br><strong>4 const和#define的区别</strong> √<br><strong>5 结论</strong> √<br>","keywords":null,"cover":null,"content":null,"text":"1 const基础知识（用法、含义、好处） √<br>2 C中“冒牌货” √<br>3 const和#define相同之处 √<br>4 const和#define的区别 √<br>5 结论 √<br>一. const基础知识（用法、含义、好处）1<br>2<br>3<br>4<","link":"","raw":null,"photos":[],"categories":[{"name":"面向对象编程","slug":"面向对象编程","count":8,"path":"api/categories/面向对象编程.json"}],"tags":[{"name":"Cpp对C的扩展","slug":"Cpp对C的扩展","count":8,"path":"api/tags/Cpp对C的扩展.json"}]},{"title":"04_C++对C的加强","slug":"C++/04_C++对C的加强","date":"2017-04-13T12:03:16.000Z","updated":"2018-05-06T16:24:57.365Z","comments":true,"path":"api/articles/C++/04_C++对C的加强.json","excerpt":"<p><strong>1 namespace命名空间</strong> √<br><strong>2 “实用性”增加</strong> √<br><strong>3 register关键字增强</strong> √<br><strong>4 变量检测增强</strong> √<br><strong>5 struct类型加强</strong> √<br><strong>6 C++中所有的变量和函数都必须有类型</strong> √<br><strong>7 新增Bool类型关键字</strong> √<br><strong>8 三目运算符功能增强</strong> √</p>","keywords":null,"cover":null,"content":null,"text":"1 namespace命名空间 √<br>2 “实用性”增加 √<br>3 register关键字增强 √<br>4 变量检测增强 √<br>5 struct类型加强 √<br>6 C++中所有的变量和函数都必须有类型 √<br>7 新增Bool类型关键字 √<br>8 三目运算","link":"","raw":null,"photos":[],"categories":[{"name":"面向对象编程","slug":"面向对象编程","count":8,"path":"api/categories/面向对象编程.json"}],"tags":[{"name":"Cpp对C的扩展","slug":"Cpp对C的扩展","count":8,"path":"api/tags/Cpp对C的扩展.json"}]},{"title":"03_C语言和C++语言关系","slug":"C++/03_C语言与C++的关系","date":"2017-04-12T09:43:06.000Z","updated":"2018-04-23T13:17:45.816Z","comments":true,"path":"api/articles/C++/03_C语言与C++的关系.json","excerpt":"<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p><strong>C++</strong><br><strong>1.以C语言为基础</strong><br><strong>2.面向对象支持</strong><br><strong>3.类型、函数加强</strong><br><strong>4.异常处理</strong></p>","keywords":null,"cover":null,"content":null,"text":"总结C++<br>1.以C语言为基础<br>2.面向对象支持<br>3.类型、函数加强<br>4.异常处理C语言是在实践的过程中逐步完善起来的<br>没有深思熟虑的设计过程<br>使用时存在很多“灰色地带”<br>残留量过多低级语言的特征<br>直接利用指针进行内存操作C语言的目","link":"","raw":null,"photos":[],"categories":[{"name":"面向对象编程","slug":"面向对象编程","count":8,"path":"api/categories/面向对象编程.json"}],"tags":[{"name":"Cpp对C的扩展","slug":"Cpp对C的扩展","count":8,"path":"api/tags/Cpp对C的扩展.json"}]},{"title":"02_程序设计方法的发展历程","slug":"C++/02_程序设计方法的发展历程","date":"2017-04-11T10:21:27.000Z","updated":"2018-05-06T16:26:25.208Z","comments":true,"path":"api/articles/C++/02_程序设计方法的发展历程.json","excerpt":"<p><strong>1 面向过程的结构化程序设计方法</strong> √<br><strong>2 面向对象的方法</strong> √<br><strong>3 面向对象的基本概念</strong> √</p>","keywords":null,"cover":null,"content":null,"text":"1 面向过程的结构化程序设计方法 √<br>2 面向对象的方法 √<br>3 面向对象的基本概念 √一. 面向过程的结构化程序设计方法设计思路：<br>  –自顶向下、逐步求精。采用模块分解与功能抽象，自顶向下、分而治之。程序结构：<br>  –按功能划分为若干个基本模块，形成一","link":"","raw":null,"photos":[],"categories":[{"name":"面向对象编程","slug":"面向对象编程","count":8,"path":"api/categories/面向对象编程.json"}],"tags":[{"name":"Cpp对C的扩展","slug":"Cpp对C的扩展","count":8,"path":"api/tags/Cpp对C的扩展.json"}]}]}