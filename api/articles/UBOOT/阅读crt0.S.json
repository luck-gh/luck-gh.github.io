{"title":"bootrom的crt0.S","slug":"UBOOT/阅读crt0.S","date":"2018-05-27T05:34:06.000Z","updated":"2018-09-15T04:16:55.451Z","comments":true,"path":"api/articles/UBOOT/阅读crt0.S.json","photos":[],"link":"","excerpt":"汇编的阅读是一个非常枯燥乏味的过程，并且每个不同的芯片都有不同的汇编语言，一切以手册为准。","covers":null,"content":"<p>汇编的阅读是一个非常枯燥乏味的过程，并且每个不同的芯片都有不同的汇编语言，一切以手册为准。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.macro vector name    </span><br><span class=\"line\">.align 2</span><br><span class=\"line\">j OS_Trap_\\name</span><br><span class=\"line\">.endm</span><br></pre></td></tr></table></figure>\n<p>使用注意：<br>1.宏定义以<code>.macro</code>开始，以<code>.endm</code>结束<br>2.可带参数，参数可有默认值<br>3.直接使用参数的名字<code>\\arg</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\t.section .nds32_init, &quot;ax&quot;</span><br><span class=\"line\">!==========================================</span><br><span class=\"line\">! Vector table</span><br><span class=\"line\">!==========================================</span><br><span class=\"line\">\t.align 2</span><br><span class=\"line\"></span><br><span class=\"line\">/*中断异常向量表创建*/</span><br><span class=\"line\">exception_vector:</span><br><span class=\"line\">\tj _start                    !  (0) Trap Reset</span><br><span class=\"line\">\tvector TLB_Fill             !  (1) Trap TLB fill</span><br><span class=\"line\">\tvector PTE_Not_Present      !  (2) Trap PTE not present</span><br><span class=\"line\">\tvector TLB_Misc             !  (3) Trap TLB misc</span><br><span class=\"line\">\tvector TLB_VLPT_Miss        !  (4) Trap TLB VLPT miss</span><br><span class=\"line\">\tvector Machine_Error        !  (5) Trap Machine error</span><br><span class=\"line\">\tvector Debug_Related        !  (6) Trap Debug related</span><br><span class=\"line\">\tvector General_Exception    !  (7) Trap General exception</span><br><span class=\"line\">\tvector Syscall              !  (8) Syscall</span><br><span class=\"line\"></span><br><span class=\"line\">\t/* HW interrupt vector layout  硬件中断向量布局 */</span><br><span class=\"line\">\thal_hw_vectors              </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t.align  2</span><br><span class=\"line\">exception_vector_end:           !   中断定义完成</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\"> * exception handlers           ！   异常向量表</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">\t.section .text</span><br><span class=\"line\"></span><br><span class=\"line\">OS_Trap_TLB_Fill:</span><br><span class=\"line\">OS_Trap_PTE_Not_Present:</span><br><span class=\"line\">OS_Trap_TLB_Misc:</span><br><span class=\"line\">OS_Trap_TLB_VLPT_Miss:</span><br><span class=\"line\">OS_Trap_Machine_Error:</span><br><span class=\"line\">OS_Trap_Debug_Related:</span><br><span class=\"line\">OS_Trap_General_Exception:</span><br><span class=\"line\">OS_Trap_Syscall:</span><br><span class=\"line\">OS_Trap_Interrupt_UNDEF:</span><br><span class=\"line\">1:  b   1b</span><br></pre></td></tr></table></figure>\n<hr>\n<p>1&gt;<code>.global</code><br><code>.global</code>关键字用来让一个符号对链接器可见，可以供其他链接对象模块使用。<br><code>.global _start</code> 让<code>_start</code>符号成为可见的标示符，这样链接器就知道跳转到程序中的什么地方并开始执行。<code>linux</code>寻找这个<code>_start</code>标签作为程序的默认进入点。</p>\n<p>在汇编和C混合编程中，在<code>GNU ARM</code>编译环境下，汇编程序中要使用<code>.global</code>伪操作声明汇编程序为全局的函数，意即可被外部函数调用，同时C程序中要使用<code>extern</code>声明要调用的汇编语言程序。</p>\n<p>2&gt;<code>.extern</code><br><code>.extern XXXX</code> 说明<code>xxxx</code>为外部函数，调用的时候可以遍访所有文件找到该函数并且使用它。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t.global _start\t\t\t//符号对链接器可见</span><br><span class=\"line\">\t.func _start\t\t\t//函数声明</span><br><span class=\"line\">\t.type _start, @function\t//指定start 这个符号是函数类型</span><br><span class=\"line\"></span><br><span class=\"line\">\t.align 2\t\t\t\t//2^2字节对齐</span><br><span class=\"line\">_start:\t\t\t\t\t\t//打标</span><br><span class=\"line\">\tli $r0, PMU_CTRL_REG3\t//将终端号放入r0寄存器</span><br><span class=\"line\">\tli $r1, 1&lt;&lt;0\t\t\t//r1寄存器存入0x01</span><br><span class=\"line\">\tswi $r1,[$r0]\t\t\t//软中断，中断号为PMU_CTRL_REG3</span><br><span class=\"line\"></span><br><span class=\"line\">\tbal _nds32_init_mem\t\t//跳到_nds32_init_mem执行完成后回来</span><br><span class=\"line\">\tbal __init\t\t\t\t//跳到__init执行完成后回来</span><br><span class=\"line\">\tbal main\t\t\t\t//跳到main执行完成后回来</span><br><span class=\"line\">1:  b   1b\t\t\t\t\t//死循环</span><br><span class=\"line\"></span><br><span class=\"line\">\t.size _start, .-_start</span><br><span class=\"line\"></span><br><span class=\"line\">\t.end</span><br></pre></td></tr></table></figure>\n","categories":[{"name":"汇编","slug":"汇编","count":2,"path":"api/categories/汇编.json"}],"tags":[{"name":"bootrom","slug":"bootrom","count":3,"path":"api/tags/bootrom.json"}]}