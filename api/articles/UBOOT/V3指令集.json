{"title":"V3指令集","slug":"UBOOT/V3指令集","date":"2018-05-26T03:54:32.000Z","updated":"2018-09-15T04:18:36.196Z","comments":true,"path":"api/articles/UBOOT/V3指令集.json","photos":[],"link":"","excerpt":"汇编的阅读是一个非常枯燥乏味的过程，并且每个不同的芯片都有不同的汇编语言，一切以手册为准。","covers":null,"content":"<p>汇编的阅读是一个非常枯燥乏味的过程，并且每个不同的芯片都有不同的汇编语言，一切以手册为准。</p>\n<a id=\"more\"></a>\n<h1 id=\"J-Jump\"><a href=\"#J-Jump\" class=\"headerlink\" title=\"J (Jump)\"></a>J (Jump)</h1><p><strong><em>类型</em></strong><br><strong>32-bit Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>J   imm24s</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PC = PC + SE(imm24s &lt;&lt; 1);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"J8-Jump-Immediate\"><a href=\"#J8-Jump-Immediate\" class=\"headerlink\" title=\"J8 (Jump Immediate)\"></a>J8 (Jump Immediate)</h1><p><strong><em>类型</em></strong><br><strong>16-bait Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>J8 imm8s</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TAddr = PC + Sign_Extend(imm8s &lt;&lt; 1);</span><br><span class=\"line\">PC = TAddr;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"JR-Jump-Register\"><a href=\"#JR-Jump-Register\" class=\"headerlink\" title=\"JR (Jump Register)\"></a>JR (Jump Register)</h1><p><strong><em>类型</em></strong><br><strong>32-bit Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>JR Rb</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PC = Rb;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"JAL-Jump-and-Link\"><a href=\"#JAL-Jump-and-Link\" class=\"headerlink\" title=\"JAL (Jump and Link)\"></a>JAL (Jump and Link)</h1><p><strong><em>类型</em></strong><br><strong>32-bit Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>JAL imm24s</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R30 = PC + 4;</span><br><span class=\"line\">PC = PC + SE(imm24s &lt;&lt; 1);</span><br><span class=\"line\">对当前指令进行无条件调用。</span><br><span class=\"line\">下一个顺序指令(PC+4)的程序地址被写入到R30(链接指针寄存器)，用于函数调用返回。</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"SETHI-Set-High-Immediate\"><a href=\"#SETHI-Set-High-Immediate\" class=\"headerlink\" title=\"SETHI (Set High Immediate)\"></a>SETHI (Set High Immediate)</h1><p><strong><em>类型</em></strong><br><strong>32-bit Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>SETHI Rt, imm20u</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rt = imm20u &lt;&lt; 12;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"ORI-Or-Immediate\"><a href=\"#ORI-Or-Immediate\" class=\"headerlink\" title=\"ORI (Or Immediate)\"></a>ORI (Or Immediate)</h1><p><strong><em>类型</em></strong><br><strong>32-bit Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>ORI Rt, Ra, imm15u</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rt = Ra | ZE(imm15u);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"MFSR-Move-From-System-Register\"><a href=\"#MFSR-Move-From-System-Register\" class=\"headerlink\" title=\"MFSR (Move From System Register)\"></a>MFSR (Move From System Register)</h1><p><strong><em>类型</em></strong><br><strong>32-bit Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>MFSR Rt, SRIDX</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GR[Rt] = SR[SRIDX];</span><br><span class=\"line\">将`SRIDX`寄存器的内容移动到通用寄存器`Rt`中。</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"AND-Bit-wise-Logical-And\"><a href=\"#AND-Bit-wise-Logical-And\" class=\"headerlink\" title=\"AND (Bit- - wise Logical And)\"></a>AND (Bit- - wise Logical And)</h1><p><strong><em>类型</em></strong><br><strong>32-bit Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>AND Rt, Ra, Rb</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rt = Ra &amp; Rb;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"BEQZ38-Branch-on-Equal-Zero\"><a href=\"#BEQZ38-Branch-on-Equal-Zero\" class=\"headerlink\" title=\"BEQZ38 (Branch on Equal Zero)\"></a>BEQZ38 (Branch on Equal Zero)</h1><p><strong><em>类型</em></strong><br><strong>16-bit Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>BEQZ38 Rt3, imm8s</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TAddr = PC + Sign_Extend(imm8s &lt;&lt; 1);</span><br><span class=\"line\">If (Rt3 == 0) &#123;</span><br><span class=\"line\">\tPC = TAddr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">如果Rt3的内容为零，则该指令将使pc跳转到目标地址。通过添加当前指令地址和跳转信号(imm8s &lt;&lt; 1)值来计算的地址。范围±256 bytes。</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"MOVI55-Move-Immediate\"><a href=\"#MOVI55-Move-Immediate\" class=\"headerlink\" title=\"MOVI55 (Move Immediate)\"></a>MOVI55 (Move Immediate)</h1><p><strong><em>类型</em></strong><br><strong>16-bit Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>MOVI55 Rt5, imm5s</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rt5 = Sign_Extend(imm5s);</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"MTUSR-Move-To-User-Special-Register\"><a href=\"#MTUSR-Move-To-User-Special-Register\" class=\"headerlink\" title=\"MTUSR (Move To User Special Register)\"></a>MTUSR (Move To User Special Register)</h1><p><strong><em>类型</em></strong><br><strong>32-bit Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>MTUSR Rt, USR_Name (= USR, Group)</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User_Special_Register[Group][USR] = Rt;</span><br><span class=\"line\">将通用寄存器的内容移动到用户专用寄存器。</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"SWI450-Store-Word-Immediate\"><a href=\"#SWI450-Store-Word-Immediate\" class=\"headerlink\" title=\"SWI450 (Store Word Immediate)\"></a>SWI450 (Store Word Immediate)</h1><p><strong><em>类型</em></strong><br><strong>16-bit Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>SWI450 Rt4, [Ra5]</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VAddr = Ra5;</span><br><span class=\"line\">if (!Word_Aligned(Vaddr)) &#123;</span><br><span class=\"line\">\tGenerate_Exception(Data_alignment_check);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(PAddr, Attributes) = Address_Translation(Vaddr, PSW.DT);</span><br><span class=\"line\">Excep_status = Page_Exception(Attributes, PSW.POM, STORE);</span><br><span class=\"line\"></span><br><span class=\"line\">If (Excep_status == NO_EXCEPTION) &#123;</span><br><span class=\"line\">\tStore_Memory(PAddr, WORD, Attributes, Rt4);</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">\tGenerate_Exception(Excep_status);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">这条指令将一个数据从通用寄存器Rt4存储到内存中。内存地址是在Ra5中指定。</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"NOP16-No-Operation\"><a href=\"#NOP16-No-Operation\" class=\"headerlink\" title=\"NOP16 (No Operation)\"></a>NOP16 (No Operation)</h1><p><strong><em>类型</em></strong><br><strong>16-bit Baseline</strong></p>\n<p><strong><em>语法</em></strong></p>\n<blockquote>\n<p>NOP16    (SRLI45 R0, 0)</p>\n</blockquote>\n<p><strong><em>目的</em></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">None</span><br></pre></td></tr></table></figure></p>\n<hr>\n","categories":[{"name":"汇编","slug":"汇编","count":2,"path":"api/categories/汇编.json"}],"tags":[{"name":"指令集","slug":"指令集","count":1,"path":"api/tags/指令集.json"}]}