{"title":"SPIFLASH","slug":"UBOOT/SPIFLASH","date":"2018-05-30T12:14:50.000Z","updated":"2018-09-28T07:39:53.840Z","comments":true,"path":"api/articles/UBOOT/SPIFLASH.json","photos":[],"link":"","excerpt":"FLASH存储器又称闪存，它结合了ROM和RAM的长处，不仅具备电子可擦除可编程（EEPROM）的性能，还可以快速读取数据（NVRAM的优势），使数据不会因为断电而丢失。 ","covers":null,"content":"<p><code>FLASH</code>存储器又称闪存，它结合了<code>ROM</code>和<code>RAM</code>的长处，不仅具备电子可擦除可编程（<code>EEPROM</code>）的性能，还可以快速读取数据（<code>NVRAM</code>的优势），使数据不会因为断电而丢失。 </p>\n<a id=\"more\"></a>\n<h1 id=\"FLASH简介\"><a href=\"#FLASH简介\" class=\"headerlink\" title=\"FLASH简介\"></a>FLASH简介</h1><h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><blockquote>\n<p><code>FLASH</code>存储器又称闪存，它结合了<code>ROM</code>和<code>RAM</code>的长处，不仅具备电子可擦除可编程（<code>EEPROM</code>）的性能，还可以快速读取数据（<code>NVRAM</code>的优势），使数据不会因为断电而丢失。 </p>\n</blockquote>\n<p><strong><em>FLASH只能的烧写中只能从<code>1</code>置<code>0</code>，不能从<code>0</code>拉<code>1</code> 。因此烧写数据前先擦除所要烧写的区域</em></strong> </p>\n<h2 id=\"当前使用FLASH\"><a href=\"#当前使用FLASH\" class=\"headerlink\" title=\"当前使用FLASH\"></a>当前使用<code>FLASH</code></h2><h3 id=\"型号\"><a href=\"#型号\" class=\"headerlink\" title=\"型号\"></a>型号</h3><p><code>XT25F08B</code><br>XT：XTX<br>25F：工作电压2.7~ 3.6V，具有4KB均匀扇区的串行闪存<br>08B：Product Density 为 8M bit</p>\n<h3 id=\"控制方式\"><a href=\"#控制方式\" class=\"headerlink\" title=\"控制方式\"></a>控制方式</h3><p>拥有标准、两线、四线IO模式<br>标准 SPI: SCLK, CS#, SI, SO,WP#, HOLD#<br>两线 SPI: SCLK, CS#, IO0, IO1, WP#,HOLD#<br>四线 SPI: SCLK, CS#, IO0, IO1, IO2,IO3</p>\n<h3 id=\"理论速度\"><a href=\"#理论速度\" class=\"headerlink\" title=\"理论速度\"></a>理论速度</h3><p> <code>120MHz for fast read with 30PF load</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">双线模式（Dual）</th>\n<th style=\"text-align:center\">四线模式（Quad）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">240Mbits/s</td>\n<td style=\"text-align:center\">480Mbits/s</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"理论擦除时间\"><a href=\"#理论擦除时间\" class=\"headerlink\" title=\"理论擦除时间\"></a>理论擦除时间</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">页擦除（Page）</th>\n<th style=\"text-align:center\">扇区擦除（Sector）</th>\n<th style=\"text-align:center\">块擦除（Block</th>\n<th style=\"text-align:center\">芯片擦除（Chip）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0.4ms</td>\n<td style=\"text-align:center\">60ms</td>\n<td style=\"text-align:center\">0.15/0.25s</td>\n<td style=\"text-align:center\">2.5s</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"页、扇区、块的关系\"><a href=\"#页、扇区、块的关系\" class=\"headerlink\" title=\"页、扇区、块的关系\"></a>页、扇区、块的关系</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">总大小（Device</th>\n<th style=\"text-align:center\">块（block）</th>\n<th style=\"text-align:center\">扇区（sector）</th>\n<th style=\"text-align:center\">页（page）</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1M</td>\n<td style=\"text-align:center\">64K/32K</td>\n<td style=\"text-align:center\">4K</td>\n<td style=\"text-align:center\">256</td>\n<td style=\"text-align:center\">bytes</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4K</td>\n<td style=\"text-align:center\">256/128</td>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">pages</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">256</td>\n<td style=\"text-align:center\">16/8</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">sectors</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16/32</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">blocks</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"状态寄存器（STATUS-REGISTER）\"><a href=\"#状态寄存器（STATUS-REGISTER）\" class=\"headerlink\" title=\"状态寄存器（STATUS REGISTER）\"></a>状态寄存器（STATUS REGISTER）</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">S15</th>\n<th style=\"text-align:center\">S14</th>\n<th style=\"text-align:center\">s13</th>\n<th style=\"text-align:center\">s12</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">SUS</td>\n<td style=\"text-align:center\">CMP</td>\n<td style=\"text-align:center\">Reserved</td>\n<td style=\"text-align:center\">Reserved</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>S11</strong></td>\n<td style=\"text-align:center\"><strong>S10</strong></td>\n<td style=\"text-align:center\"><strong>S9</strong></td>\n<td style=\"text-align:center\"><strong>S8</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Reserved</td>\n<td style=\"text-align:center\">LB</td>\n<td style=\"text-align:center\">QE</td>\n<td style=\"text-align:center\">Reserved</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>S7</strong></td>\n<td style=\"text-align:center\"><strong>S6</strong></td>\n<td style=\"text-align:center\"><strong>S5</strong></td>\n<td style=\"text-align:center\"><strong>S4</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SRP</td>\n<td style=\"text-align:center\">Reserved</td>\n<td style=\"text-align:center\">BP3</td>\n<td style=\"text-align:center\">BP2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>S3</strong></td>\n<td style=\"text-align:center\"><strong>S2</strong></td>\n<td style=\"text-align:center\"><strong>S1</strong></td>\n<td style=\"text-align:center\"><strong>S0</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">BP1</td>\n<td style=\"text-align:center\">BP0</td>\n<td style=\"text-align:center\">WEL</td>\n<td style=\"text-align:center\">WIP</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"WIP（The-Write-In-Progress）\"><a href=\"#WIP（The-Write-In-Progress）\" class=\"headerlink\" title=\"WIP（The Write In Progress）\"></a>WIP（The Write In Progress）</h4><blockquote>\n<p>写入忙碌标志位：设置状态寄存器、写入或擦除进程中内存是否繁忙<br>0x1：繁忙<br>0x0：不繁忙</p>\n</blockquote>\n<hr>\n<h4 id=\"WEL（Write-Enable-Latch）\"><a href=\"#WEL（Write-Enable-Latch）\" class=\"headerlink\" title=\"WEL（Write Enable Latch）\"></a>WEL（Write Enable Latch）</h4><blockquote>\n<p>写入使能标志位：是否接受设置状态寄存器、写入或擦除命令。<br>0x1：接受<br>0x0：不接受</p>\n</blockquote>\n<hr>\n<h4 id=\"BP3-BP2-BP1-BP0（The-Block-Protect）\"><a href=\"#BP3-BP2-BP1-BP0（The-Block-Protect）\" class=\"headerlink\" title=\"BP3, BP2, BP1, BP0（The Block Protect）\"></a>BP3, BP2, BP1, BP0（The Block Protect）</h4><blockquote>\n<p>内存块保护，用来防止擦除某一特定块</p>\n<ul>\n<li>暂不使用</li>\n</ul>\n</blockquote>\n<hr>\n<h4 id=\"SRP（The-Status-Register-Protect）\"><a href=\"#SRP（The-Status-Register-Protect）\" class=\"headerlink\" title=\"SRP（The Status Register Protect）\"></a>SRP（The Status Register Protect）</h4><blockquote>\n<p>状态寄存器保护：控制写保护方法，软件保护 、硬件保护、电源锁定或一次可编程保护。（与WP#联合使用）</p>\n<ul>\n<li>暂不使用</li>\n</ul>\n</blockquote>\n<hr>\n<h4 id=\"QE（The-Quad-Enable）\"><a href=\"#QE（The-Quad-Enable）\" class=\"headerlink\" title=\"QE（The Quad Enable）\"></a>QE（The Quad Enable）</h4><blockquote>\n<p>允许四线模式操作。默认状态为0<br>0x1：启用了四线模式需要的 I02和IO3引脚<br>0x0：启用WP# 和HOLD# 引脚<br><strong>(在标准SPI或两线SPI操作中，如果WP#或HOLD#引脚直接系在电源或地面上，QE位不应该设置为1)</strong></p>\n</blockquote>\n<hr>\n<h4 id=\"LB（Lock-Bit）\"><a href=\"#LB（Lock-Bit）\" class=\"headerlink\" title=\"LB（Lock Bit）\"></a>LB（Lock Bit）</h4><blockquote>\n<p>保护安全寄存器的控制和状态。默认状态为0<br>0x0：安全寄存器（security registers）读写<br>0x1：安全寄存器（security registers）只读</p>\n<ul>\n<li>暂不使用</li>\n</ul>\n</blockquote>\n<hr>\n<h4 id=\"CMP\"><a href=\"#CMP\" class=\"headerlink\" title=\"CMP\"></a>CMP</h4><blockquote>\n<p>与BP3, BP2, BP1, BP0配合实现更灵活的保护操作</p>\n<ul>\n<li>暂不使用</li>\n</ul>\n</blockquote>\n<hr>\n<h4 id=\"SUS\"><a href=\"#SUS\" class=\"headerlink\" title=\"SUS\"></a>SUS</h4><blockquote>\n<p>只读位用来记录是否执行擦除/写入挂起<br>0x1：执行擦除/程序挂起(75H)<br>0x0：通过擦除/程序恢复(7AH)命令和关机、启动循环，SUS位被清除为0</p>\n<ul>\n<li>暂不使用</li>\n</ul>\n</blockquote>\n<hr>\n<hr>\n<h2 id=\"常用命令简介\"><a href=\"#常用命令简介\" class=\"headerlink\" title=\"常用命令简介\"></a>常用命令简介</h2><hr>\n<h3 id=\"Write-Enable-WREN-06H\"><a href=\"#Write-Enable-WREN-06H\" class=\"headerlink\" title=\"Write Enable (WREN) (06H)\"></a>Write Enable (WREN) (06H)</h3><blockquote>\n<p>作用：使能写入<br>将状态寄存器（ <code>STATUS REGISTER</code>）的 WEL（ <code>Write Enable Latch</code>）位置<code>1</code></p>\n<p>时序：<br>   发8 bit 命令（06H）<code>[ S1 ]</code></p>\n</blockquote>\n<hr>\n<h3 id=\"Read-Status-Register-RDSR-05H-or-35H\"><a href=\"#Read-Status-Register-RDSR-05H-or-35H\" class=\"headerlink\" title=\"Read Status Register (RDSR) (05H or 35H)\"></a>Read Status Register (RDSR) (05H or 35H)</h3><blockquote>\n<p>作用：读取状态寄存器的值<br>05H：读取的是状态寄存器的 S0~S7<br>35H：读取的是状态寄存器的 S8~S15</p>\n<p><strong>读取前确保 WEL 位为1</strong></p>\n<p>时序：<br>1.发 8 bit 命令（ <code>05H/35H</code>）<code>[ S1 ]</code><br>2.收 8 bit 数据   <code>[ S0 ]</code></p>\n</blockquote>\n<hr>\n<h3 id=\"Write-Status-Register-WRSR-01H\"><a href=\"#Write-Status-Register-WRSR-01H\" class=\"headerlink\" title=\"Write Status Register (WRSR) (01H)\"></a>Write Status Register (WRSR) (01H)</h3><blockquote>\n<p>作用：写入状态寄存器的值<br>对状态寄存器的 S15 , S1 以及  S0 无用</p>\n<p><strong>读取前确保 WEL 位为1</strong></p>\n<p>时序：<br>1.发  8  bit 命令（ <code>01H</code>）<code>[ S1 ]</code><br>2.发 16 bit 的状态寄存器数据   <code>[ S1 ]</code></p>\n</blockquote>\n<hr>\n<h3 id=\"Sector-Erase-SE-20H\"><a href=\"#Sector-Erase-SE-20H\" class=\"headerlink\" title=\"Sector Erase (SE) (20H)\"></a>Sector Erase (SE) (20H)</h3><blockquote>\n<p>作用：按扇区擦除<br>按照指定扇区地址擦除此扇区内数据（全置  <code>1</code>）</p>\n<p><strong>确保状态寄存器的忙碌标志位(WIP)为 <code>0</code></strong><br><strong>读取前确保 WEL 位为1</strong></p>\n<p>时序：<br>1.发  8  bit 命令（ <code>20H</code>）<code>[ S1 ]</code><br>2.发 24 bit 的地址信息   <code>[ S1 ]</code></p>\n</blockquote>\n<hr>\n<h3 id=\"Page-Program-PP-02H\"><a href=\"#Page-Program-PP-02H\" class=\"headerlink\" title=\"Page Program (PP) (02H)\"></a>Page Program (PP) (02H)</h3><blockquote>\n<p>作用：标准模式写入</p>\n<p><strong>确保状态寄存器的忙碌标志位(WIP)为 <code>0</code></strong><br><strong>读取前确保 WEL 位为1</strong></p>\n<p>时序：<br>1.发  8  bit 命令（ <code>02H</code>）<code>[ S1 ]</code><br>2.发 24 bit 的地址信息   <code>[ S1 ]</code><br>3.发  8  bit 数据   <code>[ S1 ]</code>（最大256次）</p>\n</blockquote>\n<hr>\n<h3 id=\"4-x-I-O-Page-Program-4PP-38H\"><a href=\"#4-x-I-O-Page-Program-4PP-38H\" class=\"headerlink\" title=\"4 x I/O Page Program (4PP) (38H)\"></a>4 x I/O Page Program (4PP) (38H)</h3><blockquote>\n<p>作用：四线模式写入</p>\n<p><strong>确保状态寄存器的忙碌标志位(WIP)为 <code>0</code></strong><br><strong>读取前确保 WEL 位为1</strong></p>\n<p>时序：<br>1.发  8  bit 命令（ <code>38H</code>）<code>[ S1 ]</code><br>2.发 24 bit 的地址信息   <code>[ S1、S0(IO1)、WP#(IO2)、HOLD#(IO3) ]</code><br>3.发  8  bit 数据   <code>[ S1 ]</code>（最大256次）</p>\n</blockquote>\n<hr>\n<h3 id=\"Read-Data-Bytes-At-Higher-Speed-Fast-Read-0BH\"><a href=\"#Read-Data-Bytes-At-Higher-Speed-Fast-Read-0BH\" class=\"headerlink\" title=\"Read Data Bytes At Higher Speed (Fast Read) (0BH)\"></a>Read Data Bytes At Higher Speed (Fast Read) (0BH)</h3><blockquote>\n<p>作用：标准模式读数据</p>\n<p>时序：<br>1.发  8  bit 命令（ <code>0BH</code>）<code>[ S1 ]</code><br>2.发 24 bit 的地址信息   <code>[ S1 ]</code><br>3.发  8  bit Dummy   <code>[ S1 ]</code><br>4.收  8  bit 数据   <code>[ S0 ]</code></p>\n</blockquote>\n<hr>\n<h3 id=\"Dual-I-O-Fast-Read-BBH\"><a href=\"#Dual-I-O-Fast-Read-BBH\" class=\"headerlink\" title=\"Dual I/O Fast Read (BBH)\"></a>Dual I/O Fast Read (BBH)</h3><blockquote>\n<p>作用：两线模式读数据<br>拥有连续读写模式，<br>连续读写模式（<code>Continuous Read Mode</code>  <code>(M7- 0)</code>）<br>[<code>(M5- 4) =(1, 0)</code>]<br>下一个命令不需要第一个 <code>BBH</code> 命令代码</p>\n<p>时序：<br>1.发  8  bit 命令（ <code>BBH</code>）<code>[ SI(IO0) ]</code><br>2.发 24 bit 的地址信息   <code>[ SI(IO0)、SO(IO1) ]</code><br>3.发  8  bit M0-7   <code>[ SI(IO0)、SO(IO1) ]</code><br>4.收  8  bit 数据  <code>[ SI(IO0)、SO(IO1) ]</code></p>\n<p>连续读写时序：<br>1.发 24 bit 的地址信息   <code>[ SI(IO0)、SO(IO1) ]</code><br>2.发  8  bit M0-7   <code>[ SI(IO0)、SO(IO1) ]</code><br>3.收  8  bit 数据  <code>[ SI(IO0)、SO(IO1) ]</code></p>\n</blockquote>\n<hr>\n<h3 id=\"Quad-I-O-Fast-Read-EBH\"><a href=\"#Quad-I-O-Fast-Read-EBH\" class=\"headerlink\" title=\"Quad I/O Fast Read (EBH)\"></a>Quad I/O Fast Read (EBH)</h3><blockquote>\n<p>作用：四线模式读数据<br>拥有连续读写模式，<br>连续读写模式（<code>Continuous Read Mode</code>  <code>(M7- 0)</code>）<br>[<code>(M5- 4) =(1, 0)</code>]<br>下一个命令不需要第一个 <code>EBH</code> 命令代码</p>\n<p>时序：<br>1.发  8  bit 命令（ <code>EBH</code>）<code>[ SI(IO0) ]</code><br><strong>以下 <code>[ SI(IO0)、SO(IO1)、WP#(IO2)、HOLD#(IO3) ]</code></strong><br>2.发 24 bit 的地址信息<br>3.发  8  bit M0-7<br>4.发 16 bit Dummy<br>5.收  8  bit 数据</p>\n<p>连续读写时序：<br><strong>以下 <code>[ SI(IO0)、SO(IO1)、WP#(IO2)、HOLD#(IO3) ]</code></strong><br>1.发 24 bit 的地址信息<br>2.发  8  bit M0-7<br>3.发 16 bit Dummy<br>4.收  8  bit 数据 </p>\n</blockquote>\n<hr>\n<hr>\n<h1 id=\"SPI控制器\"><a href=\"#SPI控制器\" class=\"headerlink\" title=\"SPI控制器\"></a>SPI控制器</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><blockquote>\n<p>ATCSPI200是一个串行外设接口(SPI)控制器，可作为SPI主设备也可作为从设备。<br>作为SPI主设备，控制器连接各种SPI设备。<br>作为SPI从设备，控制器响应主请求进行数据交换</p>\n</blockquote>\n<hr>\n<h2 id=\"部分特性\"><a href=\"#部分特性\" class=\"headerlink\" title=\"部分特性\"></a>部分特性</h2><blockquote>\n<p>支持直接内存访问(DMA)数据传输<br>通过AHB总线或EILM总线支持内存映射访问(只读)<br>可配置两线、四线 I/O SPI接口</p>\n</blockquote>\n<hr>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><h3 id=\"主要寄存器简介\"><a href=\"#主要寄存器简介\" class=\"headerlink\" title=\"主要寄存器简介\"></a>主要寄存器简介</h3><h4 id=\"CNOTR-（SPI-Transfer-Control-Register-0x20-）\"><a href=\"#CNOTR-（SPI-Transfer-Control-Register-0x20-）\" class=\"headerlink\" title=\"CNOTR （SPI Transfer Control Register (0x20) ）\"></a>CNOTR （SPI Transfer Control Register (0x20) ）</h4><p>配置 SPI传输控制寄存器，可配置是否使用 CMD（<code>SPI Command Register (0x24)</code>）寄存器，ADDR（<code>SPI A A ddress Register (0x28)</code>）寄存器以及是否收发数据。</p>\n<h4 id=\"CMD（SPI-Command-Register-0x24-）\"><a href=\"#CMD（SPI-Command-Register-0x24-）\" class=\"headerlink\" title=\"CMD（SPI Command Register (0x24) ）\"></a>CMD（SPI Command Register (0x24) ）</h4><p>CMD 寄存器的数据只会从 MOSI 线发出。</p>\n<h4 id=\"ADDR（SPI-A-A-ddress-Register-0x28-）\"><a href=\"#ADDR（SPI-A-A-ddress-Register-0x28-）\" class=\"headerlink\" title=\"ADDR（SPI A A ddress Register (0x28) ）\"></a>ADDR（SPI A A ddress Register (0x28) ）</h4><p>ADDR 寄存器的数据会根据不同模式（标准、两线、四线模式；SPI控制寄存器中设置）更改发模式。</p>\n<h4 id=\"DATA（SPI-Data-Register-0x2C\"><a href=\"#DATA（SPI-Data-Register-0x2C\" class=\"headerlink\" title=\"DATA（SPI Data Register (0x2C) )\"></a>DATA（SPI Data Register (0x2C) )</h4><p>Data   寄存器可用于接收数据以及发送数据，在不同情景下会使用不同的引脚。例如标准模式的发使用的是 MOSI 线，标准模式的收，使用的是 MISO 线，双线模式的收发用的是 MOSI 与MISO 线，四线模式的收发用的是 MOSI、MISO、WP与HOLD线。</p>\n<h3 id=\"生成时序方式\"><a href=\"#生成时序方式\" class=\"headerlink\" title=\"生成时序方式\"></a>生成时序方式</h3><h4 id=\"仅使用DATA寄存器\"><a href=\"#仅使用DATA寄存器\" class=\"headerlink\" title=\"仅使用DATA寄存器\"></a>仅使用DATA寄存器</h4><p>不使用 CMD、ADDR 寄存器完成整个 SPI 的时序操作。<br>因DATA寄存器的灵活性，可使用DATA寄存器完成整个时序的实现。<br>CMD可用标准模式的发来代替，而ADDR可用对应模式的发数据来代替。</p>\n<h4 id=\"启用CMD、ADDR寄存器\"><a href=\"#启用CMD、ADDR寄存器\" class=\"headerlink\" title=\"启用CMD、ADDR寄存器\"></a>启用CMD、ADDR寄存器</h4><p>启用CMD、ADDR寄存器，这样的好处是，代码复用性高，逻辑清晰<br>可能存在问题：ADDR寄存器默认为3字节，在一些特定情况下需要自行更改。</p>\n<h1 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h1><h2 id=\"重点\"><a href=\"#重点\" class=\"headerlink\" title=\"重点\"></a><strong>重点</strong></h2><p><strong><em>FLASH是一种高速读写的存储器，烧写时只能由 <code>1</code> 清 <code>0</code> ，为此引入了“擦除”，按照固定大小擦除之后需要写入数据的空间，这是FLASH所必须要做的。</em></strong></p>\n<h2 id=\"对-SPI-控制器内的寄存器做结构体转换\"><a href=\"#对-SPI-控制器内的寄存器做结构体转换\" class=\"headerlink\" title=\"对 SPI 控制器内的寄存器做结构体转换\"></a>对 SPI 控制器内的寄存器做结构体转换</h2><p>创造一个结构体包含所有的 SPI 控制器内的寄存器地址，不连续的保留，元素大小与寄存器大小一致，然后将次结构体以指针形式指向 SPI 控制器的地址总线，之后结构体里元素的数据就与控制器内寄存器一致。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPI2_BASE\t\t\t_IO_(0x0060A000) <span class=\"comment\">/* Device base address */</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">spi_regs</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\tedRer;<span class=\"comment\">/* 0x00 - id and revision reg*/</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\trev1[<span class=\"number\">3</span>];<span class=\"comment\">/* 0x04-0x0C - reserved reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\ttransFmt;<span class=\"comment\">/* 0x10 - spi transfer format reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\tdirectIO;<span class=\"comment\">/* 0x14 - spi direct io control reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\trev2[<span class=\"number\">2</span>];<span class=\"comment\">/* 0x18-0x1C - reserved reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\ttransCtrl;<span class=\"comment\">/* 0x20 - spi transfer control reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\tcmd;<span class=\"comment\">/* 0x24 - spi command reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\taddr;<span class=\"comment\">/* 0x28 - spi address reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\tdata;<span class=\"comment\">/* 0x2C - spi data reg */</span>\t</span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\tctrl;<span class=\"comment\">/* 0x30 - spi control reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\tstatus;<span class=\"comment\">/* 0x34 - spi status reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\tintrEn;<span class=\"comment\">/* 0x38 - spi interrupt enable reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\tintrSt;<span class=\"comment\">/* 0x3C - spi interrupt status reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\ttiming;<span class=\"comment\">/* 0x40 - spi interface timing reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\trev3[<span class=\"number\">3</span>];<span class=\"comment\">/* 0x44-0x4C - reserved reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\tmemCtrl;<span class=\"comment\">/* 0x50 - spi memery access control reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\trev4[<span class=\"number\">3</span>];<span class=\"comment\">/* 0x54-0x5C - reserved reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\tstvSt;<span class=\"comment\">/* 0x60 - spi slave status reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\tslvDataCnt;<span class=\"comment\">/* 0x64 - spi slave data count reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\trev5[<span class=\"number\">5</span>];<span class=\"comment\">/* 0x68-0x78 - spi status reg */</span></span><br><span class=\"line\">\t<span class=\"keyword\">volatile</span> <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>\tconfig;<span class=\"comment\">/* 0x7C  - configuration reg */</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;spi_reg;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数说明\"><a href=\"#函数说明\" class=\"headerlink\" title=\"函数说明\"></a>函数说明</h2><h3 id=\"初始化函数（hal-spiflash-init）\"><a href=\"#初始化函数（hal-spiflash-init）\" class=\"headerlink\" title=\"初始化函数（hal_spiflash_init）\"></a>初始化函数（hal_spiflash_init）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hal_spiflash_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>功    能：</strong>初始化 IO 引脚复用与使能时钟，并使 SPI 结构体与 SPI2_BASE 连接<br><strong>返回值：</strong>无<br><strong>参    数：</strong>无</p>\n</blockquote>\n<hr>\n<h3 id=\"设置FLASH模式（hal-spiflash-io-mode）\"><a href=\"#设置FLASH模式（hal-spiflash-io-mode）\" class=\"headerlink\" title=\"设置FLASH模式（hal_spiflash_io_mode）\"></a>设置FLASH模式（hal_spiflash_io_mode）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hal_spiflash_io_mode</span><span class=\"params\">(<span class=\"keyword\">int</span> spi_flash_io_mode)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>功    能：</strong>设置 FLASH 的读写模式，标准、双线与四线，其中四线区别于前两种，因为其拉高了QE<br><strong>返回值：</strong>无<br><strong>参    数：</strong><code>int spi_flash_io_mode</code>，只识别以下三种情况<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPI_MODE_REGULAR\t0</span></span><br><span class=\"line\">&gt;<span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPI_MODE_DUAL\t\t1</span></span><br><span class=\"line\">&gt;<span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPI_MODE_QUAD\t\t2</span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<hr>\n<h3 id=\"读FLASH函数（hal-spiflash-read）\"><a href=\"#读FLASH函数（hal-spiflash-read）\" class=\"headerlink\" title=\"读FLASH函数（hal_spiflash_read）\"></a>读FLASH函数（hal_spiflash_read）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hal_spiflash_read</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * buf, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> len)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>功    能：</strong>从 FLASH 中读取指定数据（地址与长度），存放在指定地址中<br><strong>返回值：</strong> int 型变量，返回值为0<br><strong>参    数：</strong>如下<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> addr\t:需要从 FLASH 中读取数据的地址</span><br><span class=\"line\">&gt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *buf\t:读取到的数据的存放地址</span><br><span class=\"line\">&gt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> len\t:需要读取的数据长度</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<hr>\n<h3 id=\"擦除FLASH函数（hal-spiflash-erase）\"><a href=\"#擦除FLASH函数（hal-spiflash-erase）\" class=\"headerlink\" title=\"擦除FLASH函数（hal_spiflash_erase）\"></a>擦除FLASH函数（hal_spiflash_erase）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hal_spiflash_erase</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> addr,  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> len)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>功    能：</strong>擦除掉指定空间的 FLASH 数据，按扇区擦除，向上对其，最后一部分小于一个扇区时，同样将擦除次扇区<br><strong>返回值：</strong> int 型变量，返回值为<code>0</code>时正确,非零为 FLASH 擦除超时<br><strong>参    数：</strong>如下<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> addr\t:需要擦除的起始地址</span><br><span class=\"line\">&gt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> len\t:需要擦除的数据长度</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<hr>\n<h3 id=\"写FLASH函数（hal-spiflash-write）\"><a href=\"#写FLASH函数（hal-spiflash-write）\" class=\"headerlink\" title=\"写FLASH函数（hal_spiflash_write）\"></a>写FLASH函数（hal_spiflash_write）</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">hal_spiflash_write</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> * buf, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> len)</span></span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>功    能：</strong>将指定数据（地址与长度）读取到FLASH指定地址中<br><strong>返回值：</strong> int 型变量，返回值为<code>0</code>时正确,非零为 FLASH烧写超时<br><strong>参    数：</strong>如下<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> addr\t:需要写入的 FLASH 地址</span><br><span class=\"line\">&gt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *buf\t:指定内容的存放地址</span><br><span class=\"line\">&gt;<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> len\t:需要烧写的数据长度</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<hr>\n<hr>\n<h2 id=\"功能测试\"><a href=\"#功能测试\" class=\"headerlink\" title=\"功能测试\"></a>功能测试</h2><h3 id=\"读取时间测试\"><a href=\"#读取时间测试\" class=\"headerlink\" title=\"读取时间测试\"></a>读取时间测试</h3><p>不同模式下从 FLASH 读取 64K 数据所用的时间（CPU直接访问模式）</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">指令</th>\n<th style=\"text-align:center\">40MHZ主频</th>\n<th style=\"text-align:center\">160MHZ主频</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1*IO</td>\n<td style=\"text-align:center\">0BH</td>\n<td style=\"text-align:center\">26.221ms</td>\n<td style=\"text-align:center\">6.555ms</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2*IO</td>\n<td style=\"text-align:center\">BBH</td>\n<td style=\"text-align:center\">13.112ms</td>\n<td style=\"text-align:center\">3.278ms</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4*IO</td>\n<td style=\"text-align:center\">EBH</td>\n<td style=\"text-align:center\">6.558ms</td>\n<td style=\"text-align:center\">1.639ms</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"烧写时间测试\"><a href=\"#烧写时间测试\" class=\"headerlink\" title=\"烧写时间测试\"></a>烧写时间测试</h3><p>不同模式下从 FLASH 烧写 64K 数据所用的时间</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">模式</th>\n<th style=\"text-align:center\">指令</th>\n<th style=\"text-align:center\">40MHZ主频</th>\n<th style=\"text-align:center\">160MHZ主频</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1*IO</td>\n<td style=\"text-align:center\">02H</td>\n<td style=\"text-align:center\">83.623ms</td>\n<td style=\"text-align:center\">61.607ms</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4*IO</td>\n<td style=\"text-align:center\">38H</td>\n<td style=\"text-align:center\">67.764ms</td>\n<td style=\"text-align:center\">57.643ms</td>\n</tr>\n</tbody>\n</table>\n","categories":[{"name":"SPIFLASH","slug":"SPIFLASH","count":1,"path":"api/categories/SPIFLASH.json"}],"tags":[{"name":"SPIFLASH","slug":"SPIFLASH","count":1,"path":"api/tags/SPIFLASH.json"}]}