{"title":"C++对C的加强","slug":"C++对C的加强","date":"2017-04-13T12:03:16.000Z","updated":"2018-04-22T12:54:17.361Z","comments":true,"path":"api/articles/C++对C的加强.json","photos":[],"link":"","excerpt":"一.namespace命名空间1 C++命名空间基本常识所谓namespace，是指标识符的各种可见范围。C++标准程序库中的所有标识符都被定义于一个名为std的namespace中。","covers":null,"content":"<h1 id=\"一-namespace命名空间\"><a href=\"#一-namespace命名空间\" class=\"headerlink\" title=\"一.namespace命名空间\"></a>一.namespace命名空间</h1><h2 id=\"1-C-命名空间基本常识\"><a href=\"#1-C-命名空间基本常识\" class=\"headerlink\" title=\"1 C++命名空间基本常识\"></a>1 C++命名空间基本常识</h2><p>所谓<code>namespace</code>，是指<strong>标识符的各种可见范围</strong>。C++标准程序库中的所有标识符都被定义于一个名为std的namespace中。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p><code>&lt;iostream&gt;</code>和<code>&lt;iostream.h&gt;</code>格式不一样，前者没有后缀，实际上，在你的编译器<code>include</code>文件夹里面可以看到，二者是两个文件，打开文件就会发现，里面的代码是不一样的。<strong>后缀为.h的头文件c++标准已经明确提出不支持了</strong>，早些的实现将标准库功能定义在全局空间里，声明在带.h后缀的头文件里，c++标准为了和C区别开，也为了正确使用命名空间，规定头文件不使用后缀<code>.h</code>。 因此，</p>\n<ul>\n<li>1）当使用<code>&lt;iostream.h&gt;</code>时，相当于在c中调用库函数，使用的是全局命名空间，也就是早期的c++实现；</li>\n<li>2）<strong>当使用<code>&lt;iostream&gt;</code>的时候，该头文件没有定义全局命名空间，必须使用<code>namespace std</code>；这样才能正确使用<code>cout</code>。</strong></li>\n</ul>\n</li>\n<li><p>由于<strong>namespace</strong>的概念，使用C++标准程序库的任何标识符时，可以有三种选择：</p>\n<ul>\n<li><p>直接指定标识符。例如<code>std::ostream</code>而不是<code>ostream</code>。完整语句如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::hex &lt;&lt; <span class=\"number\">3.4</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用using关键字。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>; <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>; <span class=\"keyword\">using</span> <span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>;</span><br></pre></td></tr></table></figure>\n<p>以上程序可以写成 </p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">std</span>::hex &lt;&lt; <span class=\"number\">3.4</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最方便的就是使用 <code>using namespace std;</code>  例如：<code>using namespace std;</code> 这样命名空间 <code>std</code> 内定义的所有标识符都有效（曝光）。就好像它们被声明为全局变量一样。那么以上语句可以如下写 :<code>cout &lt;&lt;hex &lt;&lt; 3.4 &lt;&lt; endl;</code> 因为标准库非常的庞大，所以程序员在选择的类的名称或函数名时就很有可能和标准库中的某个名字相同。所以为了<strong><em>避免这种情况所造成的名字冲突</em></strong>，就把标准库中的一切都被放在名字空间 <code>std</code> 中。但这又会带来了一个新问 题。无数原有的C++代码都依赖于使用了多年的伪标准库中的功能，他们都是在全局空间下的。所以就有了 <code>&lt;iostream.h&gt;</code> 和 <code>&lt;iostream&gt;</code> 等等这样的头文件，一个是为了兼容以前的C++代码，一个是为了支持新的标准。命名空间std封装的是标准程序库的名称，标准程序库为了和以前的头文件区别，一般不加”.h”</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-C-命名空间定义及使用语法\"><a href=\"#2-C-命名空间定义及使用语法\" class=\"headerlink\" title=\"2 C++命名空间定义及使用语法\"></a>2 C++命名空间定义及使用语法</h2><p>在C++中，名称（name）可以是符号常量、变量、宏、函数、结构、枚举、类和对象等等。为了避免，在大规模程序的设计中，以及在程序员使用各种各样的C++库时，这些标识符的命名发生冲突，<br>标准C++引入了关键字 <code>namespace</code>（命名空间/名字空间/名称空间/名域），可以更好地控制标识符的作用域。</p>\n<p>std是c++标准命名空间，c++标准程序库中的所有标识符都被定义在std中，比如标准库中的类<code>iostream</code>、<code>vector</code><br>等都定义在该命名空间中，使用时要加上 <code>using</code> 声明( <code>using namespace std</code> )  或 <code>using</code> 指示(如<code>std::string</code>、<code>std::vector&lt;int&gt;</code>).</p>\n<p>C中的命名空间</p>\n<blockquote>\n<p>在C语言中只有一个全局作用域<br>C语言中所有的全局标识符共享同一个作用域<br>标识符之间可能发生冲突  </p>\n</blockquote>\n<p>C++中提出了命名空间的概念</p>\n<blockquote>\n<p>命名空间将全局作用域分成不同的部分<br>不同命名空间中的标识符可以同名而不会发生冲突<br>命名空间可以相互嵌套<br>全局作用域也叫默认命名空间</p>\n</blockquote>\n<p><strong><em>C++命名空间的定义：</em></strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> name &#123;  …  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>C++命名空间的使用：</em></strong></p>\n<blockquote>\n<p>使用整个命名空间：using namespace name;<br>使用命名空间中的变量：using name::variable;<br>使用默认命名空间中的变量：::variable<br>默认情况下可以直接使用默 认命名空间中的所有标识符</p>\n</blockquote>\n<h2 id=\"3-C-命名空间编程实践\"><a href=\"#3-C-命名空间编程实践\" class=\"headerlink\" title=\"3 C++命名空间编程实践\"></a>3 C++命名空间编程实践</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> NameSpaceA</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> NameSpaceB</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">namespace</span> NameSpaceC</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Teacher</span></span></span><br><span class=\"line\"><span class=\"class\">\t\t&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> NameSpaceA;</span><br><span class=\"line\">\t<span class=\"keyword\">using</span> NameSpaceB::NameSpaceC::Teacher;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d\\n\"</span>, a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d\\n\"</span>, NameSpaceB::a);</span><br><span class=\"line\"></span><br><span class=\"line\">NameSpaceB::NameSpaceC::Teacher t2</span><br><span class=\"line\">\tTeacher t1 = &#123;<span class=\"string\">\"aaa\"</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"t1.name = %s\\n\"</span>, t1.name);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"t1.age = %d\\n\"</span>, t1.age);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-结论\"><a href=\"#4-结论\" class=\"headerlink\" title=\"4 结论\"></a>4 结论</h2><ul>\n<li>当使用 <code>&lt;iostream&gt;</code> 的时候，该头文件没有定义全局命名空间，必须使用 <code>namespace std</code> ；这样才能正确使用<code>cout</code>。若不引入 <code>using namespace std</code> ,需要这样做。 <code>std::cout</code> 。</li>\n<li>c++标准为了和C区别开，也为了正确使用命名空间，规定头文件不使用后缀.h。</li>\n<li>C++命名空间的定义：<code>namespace name {  …  }</code></li>\n<li><code>using namespace NameSpaceA;</code></li>\n<li><code>namespce</code>定义可嵌套。</li>\n</ul>\n<h1 id=\"二-“实用性”增加\"><a href=\"#二-“实用性”增加\" class=\"headerlink\" title=\"二.“实用性”增加\"></a>二.“实用性”增加</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"comment\">//C语言中的变量都必须在作用域开始的位置定义！！</span></span><br><span class=\"line\"><span class=\"comment\">//C++中更强调语言的“实用性”，所有的变量都可以在需要使用时再定义。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main11</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"ddd\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-register关键字增强\"><a href=\"#三-register关键字增强\" class=\"headerlink\" title=\"三.register关键字增强\"></a>三.register关键字增强</h1><p>register关键字 请求编译器让变量a直接放在寄存器里面，速度快<br>在c语言中 register修饰的变量不能取地址，但是在c++里面做了内容</p>\n<ul>\n<li>register关键字的变化<br>register关键字请求“编译器”将局部变量存储于寄存器中<br>C语言中无法取得register变量地址<br>C++中依然支持register关键字<br>C++编译器有自己的优化方式，不使用register也可能做优化<br>C++中可以取得register变量的地址</li>\n</ul>\n<ul>\n<li><p>C++编译器发现程序中需要取register变量的地址时，register对变量的声明变得无效。</p>\n</li>\n<li><p>早期C语言编译器不会对代码进行优化，因此register变量是一个很好的补充。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main22</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">register</span> <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;a = %x\\n\"</span>, &amp;a);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"四-变量检测增强\"><a href=\"#四-变量检测增强\" class=\"headerlink\" title=\"四.变量检测增强\"></a>四.变量检测增强</h1><ul>\n<li><p>在C语言中，重复定义多个同名的全局变量是合法的<br>在C++中，不允许定义多个同名的全局变量<br>C语言中多个同名的全局变量最终会被链接到全局数据区的同一个地址空间上</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> g_var;</span><br><span class=\"line\"><span class=\"keyword\">int</span> g_var = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>C++直接拒绝这种二义性的做法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"g_var = %d\\n\"</span>, g_var);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"五-struct类型加强\"><a href=\"#五-struct类型加强\" class=\"headerlink\" title=\"五.struct类型加强\"></a>五.struct类型加强</h1><ul>\n<li>struct类型的加强：<br>C语言的 <code>struct</code> 定义了一组变量的集合，C编译器并不认为这是一种新的类型<br>C++中的struct是一个新类型的定义声明<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Student</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    char name[100];</span><br><span class=\"line\">    int age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char *argv[])</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Student s1 = &#123;&quot;wang&quot;, 1&#125;;</span><br><span class=\"line\">    Student s2 = &#123;&quot;wang2&quot;, 2&#125;;    </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"六-C-中所有的变量和函数都必须有类型\"><a href=\"#六-C-中所有的变量和函数都必须有类型\" class=\"headerlink\" title=\"六.C++中所有的变量和函数都必须有类型\"></a>六.C++中所有的变量和函数都必须有类型</h1><ul>\n<li>C++中所有的变量和函数都必须有类型<br>  C语言中的默认类型在C++中是不合法的</li>\n</ul>\n<p>问题：函数f的返回值是什么类型，参数又是什么类型？<br>函数g可以接受多少个参数？更换成.cpp试试<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(i)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"i = %d\\n\"</span>, i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">g()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tf(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"g() = %d\\n\"</span>, g(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\tgetchar();\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>总结：</em></strong></p>\n<p>在C语言中</p>\n<blockquote>\n<p>int f(    )；表示返回值为int，接受任意参数的函数<br>int f(void)；表示返回值为int的无参函数<br>在C++中<br>int f(  );和int f(void)具有相同的意义，都表示返回值为int的无参函数</p>\n</blockquote>\n<p>C++更加强调类型，任意的程序元素都必须显示指明类型<br>    <strong><em>二.到 六属于语法级别的增强。</em></strong></p>\n<h1 id=\"七-新增Bool类型关键字\"><a href=\"#七-新增Bool类型关键字\" class=\"headerlink\" title=\"七.新增Bool类型关键字\"></a>七.新增Bool类型关键字</h1><ul>\n<li><p>C++中的布尔类型<br>  C++在C语言的基本类型系统之上增加了<code>bool</code><br>  C++中的<code>bool</code>可取的值只有<code>true</code>和<code>false</code><br>  理论上<code>bool</code>只占用一个字节，<br>  如果多个<code>bool</code>变量定义在一起，可能会各占一个<code>bit</code>，这取决于编译器的实现</p>\n<p>  <code>true</code>代表真值，编译器内部用1来表示<br>  <code>false</code>代表非真值，编译器内部用0来表示</p>\n<p>  <code>bool</code>类型只有<code>true</code>（非0）和<code>false</code>（0）两个值<br>  C++编译器会在赋值时将非0值转换为<code>true</code>，0值转换为<code>false</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> b = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"b = %d, sizeof(b) = %d\\n\"</span>, b, <span class=\"keyword\">sizeof</span>(b));</span><br><span class=\"line\"></span><br><span class=\"line\">\tb = <span class=\"number\">4</span>;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d, b = %d\\n\"</span>, a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tb = <span class=\"number\">-4</span>;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d, b = %d\\n\"</span>, a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tb = a;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d, b = %d\\n\"</span>, a, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"b = %d\\n\"</span>, b);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"八-三目运算符功能增强\"><a href=\"#八-三目运算符功能增强\" class=\"headerlink\" title=\"八.三目运算符功能增强\"></a>八.三目运算符功能增强</h1><h2 id=\"1-三目运算符在C和C-编译器的表现\"><a href=\"#1-三目运算符在C和C-编译器的表现\" class=\"headerlink\" title=\"1 三目运算符在C和C++编译器的表现\"></a>1 三目运算符在C和C++编译器的表现</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//返回一个最小数 并且给最小数赋值成3</span></span><br><span class=\"line\">\t<span class=\"comment\">//三目运算符是一个表达式 ，表达式不可能做左值</span></span><br><span class=\"line\">\t(a &lt; b ? a : b )= <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d, b = %d\\n\"</span>, a, b); </span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-结论\"><a href=\"#2-结论\" class=\"headerlink\" title=\"2 结论\"></a>2 结论</h2><ul>\n<li><p>C语言返回变量的值 C++语言是返回变量本身<br>C语言中的三目运算符返回的是变量值，不能作为左值使用<br>C++中的三目运算符可直接返回变量本身，因此可以出现在程序的任何地方</p>\n</li>\n<li><p>注意：三目运算符可能返回的值中如果有一个是常量值，则不能作为左值使用<br><code>(a &lt; b ? 1 : b )= 30;</code></p>\n</li>\n<li><p>C语言如何支持类似C++的特性呢？<br>当左值的条件：要有内存空间；C++编译器帮助程序员取了一个地址而已<br>思考：如何让C中的三目运算法当左值呢？</p>\n</li>\n</ul>\n","categories":[{"name":"面向对象编程","slug":"面向对象编程","count":6,"path":"api/categories/面向对象编程.json"}],"tags":[{"name":"Cpp对C的扩展","slug":"Cpp对C的扩展","count":6,"path":"api/tags/Cpp对C的扩展.json"}]}