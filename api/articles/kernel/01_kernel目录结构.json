{"title":"01_kernel目录结构","slug":"kernel/01_kernel目录结构","date":"2017-10-16T00:14:27.000Z","updated":"2018-10-21T08:49:41.966Z","comments":true,"path":"api/articles/kernel/01_kernel目录结构.json","photos":[],"link":"","excerpt":"简介：此文章简述linux-kernel目录层结构","covers":null,"content":"<h1 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h1><p>此文章简述<code>linux-kernel</code>目录层结构</p>\n<a id=\"more\"></a>\n<hr>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">内核的源码获取</span><br><span class=\"line\">\t最新的内核源码：</span><br><span class=\"line\">\t\twww<span class=\"selector-class\">.kernel</span><span class=\"selector-class\">.org</span></span><br><span class=\"line\">\t历史版本内核源码：</span><br><span class=\"line\">\t\thttps:<span class=\"comment\">//www.kernel.org/pub/</span></span><br></pre></td></tr></table></figure>\n<p>首先进入基地址<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">/linux-3.5</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li><code>arch</code>:特定体系架构的源码。（硬件处理器架构，例如只关注ARM架构时可以删除 <code>ARM、Kconfig</code>之外的目录，方便之后学习ARM源码）</li>\n<li><code>block</code>:块设备I/O层。</li>\n<li><code>crypto</code>:加密API。（<code>sha512</code>相对较为安全）<br>（可使用<code>grub</code>命令将明文加密。eg：<code>grub-md5-crypt</code>）</li>\n<li><p><code>Documentation</code>:内核源码文档。（因为内核没有man手册，故此这个目录很重要，推荐两个文档）</p>\n<blockquote>\n<p><code>./zh_CN/CodingStyle</code> :内核语法建议，缩进为8；case在switch之下；除函数外的语法左花括号放于语句之后，不单独占一行；双目与三目运算符左右都要有空格；<br><code>./zh_CN/HOWTO</code>:这是一篇将参与Linux内核开发的相关问题一网打尽的终极秘籍。</p>\n</blockquote>\n</li>\n<li><p><code>drivers</code>:设备驱动程序，放置了几乎百分之九十的驱动 。</p>\n</li>\n<li><code>firmware</code>:使用默写驱动程序而需要的设备固件。（生产厂商提供）</li>\n<li><code>fs</code>:VFS和各种文件系统。（系统支持的文件系统类型）</li>\n<li><p><code>include</code>:内核头文件。（使用头文件时需要加上以 include 为相对路径的路径名）</p>\n<blockquote>\n<p><code>arch/arm/mach-exynos/include/mach</code>:与ARM架构体系相关的头文件路径 &lt;mach/xx.h&gt;<br><code>arch/arm/plat-samsung/include/plat</code>:与ARM架构体系相关的头文件路径 &lt;plat/xx.h&gt;</p>\n</blockquote>\n</li>\n<li><p><code>init</code>:内和引导和初始化。</p>\n</li>\n<li><code>ipc</code>:进程间通信代码。（信号量、共享内存、消息队列）</li>\n<li><p><code>kernel</code>:像调度程序这样的核心子系统。（电源管理、时间管理，进程调度，中断管理使用的代码）</p>\n<blockquote>\n<p><code>kernel/trace</code>:内核跟踪调试相关。<br><code>kernel/sched</code>:进程调度相关。<br><code>kernel/irq</code>:中断相关。</p>\n</blockquote>\n</li>\n<li><p><code>lib</code>:通用内核函数。（与体系结构无关的通用库函数）</p>\n</li>\n<li><code>mm</code>:内存管理子系统与VM。</li>\n<li><code>net</code>:网络子系统。（蓝牙、WIFI等）</li>\n<li><code>samples</code>:示例代码。</li>\n<li><code>scripts</code>:编译内核所用的脚本。</li>\n<li><code>sectrity</code>:Linux安全模块。</li>\n<li><code>sound</code>:语音子系统。（声卡相关）</li>\n<li><code>usr</code>:早期用户代码空间（所谓的 intramfs ）。</li>\n<li><code>tools</code>:在Linux开发中有用的工具。</li>\n<li><p><code>virt</code>:虚拟化基础结构。</p>\n</li>\n<li><p><code>CRDITS</code>and<code>MAINTAINERS</code>:雷纳斯.托瓦丝，所编辑的文档，记录对Linux有贡献的人。</p>\n</li>\n</ul>\n<p>更多详情可在《Linux_kernel_design3.pdf》的内核源码树</p>\n","categories":[{"name":"KERNEL","slug":"KERNEL","count":2,"path":"api/categories/KERNEL.json"}],"tags":[{"name":"kernel Linux","slug":"kernel-Linux","count":2,"path":"api/tags/kernel-Linux.json"}]}