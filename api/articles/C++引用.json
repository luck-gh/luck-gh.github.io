{"title":"06_C++引用","slug":"C++引用","date":"2017-04-16T11:15:29.000Z","updated":"2018-04-23T13:24:26.708Z","comments":true,"path":"api/articles/C++引用.json","photos":[],"link":"","excerpt":"1 引用（普通引用） √<br>2 常引用 √<br>3 const引用结论 √<br>4 const修饰类 √<br>5 综合练习 √<br>","covers":null,"content":"<p><strong>1 引用（普通引用）</strong> √<br><strong>2 常引用</strong> √<br><strong>3 const引用结论</strong> √<br><strong>4 const修饰类</strong> √<br><strong>5 综合练习</strong> √<br><a id=\"more\"></a></p>\n<h1 id=\"一-引用（普通引用）\"><a href=\"#一-引用（普通引用）\" class=\"headerlink\" title=\"一. 引用（普通引用）\"></a>一. 引用（普通引用）</h1><ul>\n<li>变量名回顾<br>变量名实质上是一段连续存储空间的别名，是一个标号(门牌号)<br>程序中通过变量来申请并命名内存空间<br>通过变量的名字可以使用存储空间</li>\n</ul>\n<p><strong><em>问题1：对一段连续的内存空间只能取一个别名吗？</em></strong></p>\n<h2 id=\"1-引用概念\"><a href=\"#1-引用概念\" class=\"headerlink\" title=\"1 引用概念\"></a>1 引用概念</h2><ul>\n<li>在C++中新增加了引用的概念</li>\n<li>引用可以看作一个 <strong><em>已定义变量</em></strong> 的别名</li>\n<li>引用的语法：<code>Type&amp; name = var;</code> </li>\n<li>引用做函数参数那？（引用作为函数参数声明时不进行初始化）<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main01</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>; <span class=\"comment\">//c编译器分配4个字节内存。。。a内存空间的别名</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> &amp;b = a;  <span class=\"comment\">//b就是a的别名。。。</span></span><br><span class=\"line\">\ta =<span class=\"number\">11</span>; <span class=\"comment\">//直接赋值</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> *p = &amp;a;</span><br><span class=\"line\">\t\t*p = <span class=\"number\">12</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a %d \\n\"</span>,a);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tb  = <span class=\"number\">14</span>; </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a:%d b:%d\"</span>, a, b);</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"2-引用是C-的概念\"><a href=\"#2-引用是C-的概念\" class=\"headerlink\" title=\"2 引用是C++的概念\"></a>2 引用是C++的概念</h2><p>属于C++编译器对C的扩展<br><strong><em>问题：</em></strong><br>    C中可以编译通过吗？<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> &amp;b = a; <span class=\"comment\">//int * const b = &amp;a </span></span><br><span class=\"line\">     b = <span class=\"number\">11</span>;  <span class=\"comment\">//*b = 11;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>结论：</em></strong><br>    不要用C的语法考虑 b=11,结果为a = 11;</p>\n<h2 id=\"3-引用做函数参数\"><a href=\"#3-引用做函数参数\" class=\"headerlink\" title=\"3 引用做函数参数\"></a>3 引用做函数参数</h2><ul>\n<li>普通引用在声明时必须用其它的变量进行初始化，引用作为函数参数声明时不进行初始化<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//05复杂数据类型 的引用</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Teacher</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age ;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printfT</span><span class=\"params\">(Teacher *pT)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;pT-&gt;age&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//pT是t1的别名 ,相当于修改了t1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printfT2</span><span class=\"params\">(Teacher &amp;pT)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//cout&lt;&lt;pT.age&lt;&lt;endl;</span></span><br><span class=\"line\">\tpT.age = <span class=\"number\">33</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//pT和t1的是两个不同的变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printfT3</span><span class=\"params\">(Teacher pT)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;pT.age&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tpT.age = <span class=\"number\">45</span>; <span class=\"comment\">//只会修改pT变量 ,不会修改t1变量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\tTeacher t1;</span><br><span class=\"line\">\tt1.age = <span class=\"number\">35</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintfT(&amp;t1);</span><br><span class=\"line\"></span><br><span class=\"line\">\tprintfT2(t1); <span class=\"comment\">//pT是t1的别名</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"t1.age:%d \\n\"</span>, t1.age); <span class=\"comment\">//33</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tprintfT3(t1) ;<span class=\"comment\">// pT是形参 ,t1 copy一份数据 给pT     //---&gt; pT = t1</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"t1.age:%d \\n\"</span>, t1.age); <span class=\"comment\">//35</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello...\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;    </span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"4-引用的意义\"><a href=\"#4-引用的意义\" class=\"headerlink\" title=\"4 引用的意义\"></a>4 引用的意义</h2><ul>\n<li>引用作为其它变量的别名而存在，因此在一些场合可以代替指针</li>\n<li>引用相对于指针来说具有更好的可读性和实用性<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">swap1</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a,<span class=\"keyword\">int</span> &amp;b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = a;</span><br><span class=\"line\">    a = b;</span><br><span class=\"line\">    b = t;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">swap2</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = *a;</span><br><span class=\"line\">    *a = *b;</span><br><span class=\"line\">    *b = t;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"5-引用本质思考\"><a href=\"#5-引用本质思考\" class=\"headerlink\" title=\"5 引用本质思考\"></a>5 引用本质思考</h2><p><strong><em>思考1：</em></strong><br>    <em>C++编译器背后做了什么工作？</em><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">   \t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> &amp;b = a;</span><br><span class=\"line\">\t<span class=\"comment\">//b是a的别名，请问c++编译器后面做了什么工作？</span></span><br><span class=\"line\">\tb = <span class=\"number\">11</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b---&gt;\"</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a:%d\\n\"</span>, a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"b:%d\\n\"</span>, b);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;a:%d\\n\"</span>, &amp;a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;b:%d\\n\"</span>, &amp;b);  <span class=\"comment\">//请思考：对同一内存空间可以取好几个名字吗？</span></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>单独定义的引用时，必须初始化；说明很像一个常量<br><strong><em>思考2：</em></strong><br>  普通引用有自己的空间吗？<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Teacer</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> &amp;a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> &amp;b;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"sizeof(Teacher) %d\\n\"</span>, <span class=\"keyword\">sizeof</span>(Teacer));</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>引用是一个有地址，引用是常量。。。。。<br><code>char *const p</code></p>\n<h2 id=\"6-引用的本质\"><a href=\"#6-引用的本质\" class=\"headerlink\" title=\"6 引用的本质\"></a>6 引用的本质</h2><ul>\n<li>引用在C++中的内部实现是一个常指针<br>  <code>Type&amp; name</code> = <code>Type* const name</code></li>\n<li>C++编译器在编译过程中使用常指针作为引用的内部实现，因此引用所占用的空间大小与指针相同。</li>\n<li>从使用的角度，引用会让人误会其只是一个别名，没有自己的存储空间。这是C++为了实用性而做出的细节隐藏</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a)</span> </span>&#123;</span><br><span class=\"line\">    a = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> *<span class=\"keyword\">const</span> a)</span> </span>&#123;</span><br><span class=\"line\">    *a = <span class=\"number\">5</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\">    func(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><em>请仔细对比间接赋值成立的三个条件</em></strong><ul>\n<li>定义两个变量 （一个实参一个形参）</li>\n<li>建立关联 实参取地址传给形参</li>\n<li>*p形参去间接的修改实参的值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"7-引用结论\"><a href=\"#7-引用结论\" class=\"headerlink\" title=\"7 引用结论\"></a>7 引用结论</h2><ul>\n<li><strong><em>引用在实现上，只不过是把：间接赋值成立的三个条件的后两步和二为一</em></strong><br>当实参传给形参引用的时候，只不过是c++编译器帮我们程序员手工取了一个实参地址，传给了形参引用（常量指针）</li>\n<li>当我们<strong>使用引用</strong>语法的时，我们不去关心编译器引用是怎么做的<br>当我们<strong>分析奇怪的语法现象</strong>的时，我们才去考虑c++编译器是怎么做的</li>\n</ul>\n<h2 id=\"8-函数返回值是引用-引用当左值\"><a href=\"#8-函数返回值是引用-引用当左值\" class=\"headerlink\" title=\"8 函数返回值是引用(引用当左值)\"></a>8 函数返回值是引用(引用当左值)</h2><ul>\n<li>C++引用使用时的难点：<ul>\n<li>当函数返回值为引用时<br>若返回栈变量<br>不能成为其它引用的初始值<br>不能作为左值使用</li>\n<li>若返回静态变量或全局变量<br>可以成为其他引用的初始值<br>即可作为右值使用，也可作为左值使用</li>\n<li>C++链式编程中，经常用到引用，运算符重载专题</li>\n</ul>\n</li>\n</ul>\n<p><strong><em>返回值是基础类型，当引用</em></strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getAA1</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基础类型a返回的时候，也会有一个副本</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>&amp; <span class=\"title\">getAA2</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"title\">getAA3</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\ta = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>返回值是static变量，当引用</em></strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//static修饰变量的时候，变量是一个状态变量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">j</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta ++;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a:%d \\n\"</span>, a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>&amp; <span class=\"title\">j1</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta ++;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a:%d \\n\"</span>, a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *<span class=\"title\">j2</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta ++;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a:%d \\n\"</span>, a);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main22</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// j()的运算结果是一个数值，没有内存地址，不能当左值。。。。。</span></span><br><span class=\"line\">\t<span class=\"comment\">//11 = 100;</span></span><br><span class=\"line\">\t<span class=\"comment\">//*(a&gt;b?&amp;a:&amp;b) = 111;</span></span><br><span class=\"line\">\t<span class=\"comment\">//当被调用的函数当左值的时候，必须返回一个引用。。。。。</span></span><br><span class=\"line\">\tj1() = <span class=\"number\">100</span>; <span class=\"comment\">//编译器帮我们打造了环境</span></span><br><span class=\"line\">\tj1();</span><br><span class=\"line\">\t*(j2()) = <span class=\"number\">200</span>; <span class=\"comment\">//相当于我们程序员手工的打造 做左值的条件</span></span><br><span class=\"line\">\tj2();</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>返回值是形参，当引用</em></strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">g1</span><span class=\"params\">(<span class=\"keyword\">int</span> *p)</span> </span>&#123;</span><br><span class=\"line\">\t*p = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>&amp;  <span class=\"title\">g2</span><span class=\"params\">(<span class=\"keyword\">int</span> *p)</span> </span>&#123;</span><br><span class=\"line\">\t*p = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> *p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//当我们使用引用语法的时候 ，我们不去关心编译器引用是怎么做的</span></span><br><span class=\"line\"><span class=\"comment\">//当我们分析乱码这种现象的时候，我们才去考虑c++编译器是怎么做的。。。。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main23</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">\ta1 = g2(&amp;a1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> &amp;a2 = g2(&amp;a1); <span class=\"comment\">//用引用去接受函数的返回值，是不是乱码，关键是看返回的内存空间是不是被编译器回收了。。。。</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a1:%d \\n\"</span>, a1);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a2:%d \\n\"</span>, a2);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong><em>返回值非基础类型 </em></strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Teachar</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>如果返回引用不是基础类型，是一个类，那么情况非常赋值。。涉及到copy构造函数和=操作重载，抛砖。。。。<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Teachar</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//如果返回引用不是基础类型，是一个类，那么情况非常赋值。。涉及到copy构造函数和=操作重载，抛砖。。。。</span></span><br><span class=\"line\"><span class=\"function\">struct Teachar &amp; <span class=\"title\">OpTeacher</span><span class=\"params\">(struct Teachar &amp;t1)</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"9-指针引用\"><a href=\"#9-指针引用\" class=\"headerlink\" title=\"9 指针引用\"></a>9 指针引用</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Teacher</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getTe</span><span class=\"params\">(Teacher **myp )</span> </span>&#123;</span><br><span class=\"line\">\tTeacher *p = (Teacher *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Teacher));</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (p ==<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(p, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(Teacher));</span><br><span class=\"line\">\tp-&gt;age = <span class=\"number\">33</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t*myp  = p; <span class=\"comment\">//</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指针的引用而已</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getTe2</span><span class=\"params\">(Teacher*  &amp;myp)</span> </span>&#123;</span><br><span class=\"line\">\tmyp = (Teacher *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Teacher));</span><br><span class=\"line\">\tmyp-&gt;age = <span class=\"number\">34</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main333</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\tTeacher *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//getTe(&amp;p);</span></span><br><span class=\"line\">\tgetTe2(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"age:%d \\n\"</span>, p-&gt;age);</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"二-常引用-引用难点\"><a href=\"#二-常引用-引用难点\" class=\"headerlink\" title=\"二. 常引用(引用难点)\"></a>二. 常引用(引用难点)</h1><h2 id=\"1-使用变量初始化const引用\"><a href=\"#1-使用变量初始化const引用\" class=\"headerlink\" title=\"1 使用变量初始化const引用\"></a>1 使用变量初始化const引用</h2><p><strong><em>思考：</em></strong><br><code>cost int &amp;a = b PK const int &amp;a = 10;</code><br>？？？？问题：const引用，</p>\n<ul>\n<li>在C++中可以声明const引用<br>const Type&amp; name = var；<br>const引用让变量拥有只读属性<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//案例1：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;b = a; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//int *p = (int *)&amp;b;</span></span><br><span class=\"line\">\tb = <span class=\"number\">11</span>; <span class=\"comment\">//err</span></span><br><span class=\"line\">\t<span class=\"comment\">//*p = 11; //只能用指针来改变了</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"b---&gt;\"</span>&lt;&lt;a&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a:%d\\n\"</span>, a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"b:%d\\n\"</span>, b);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;a:%d\\n\"</span>, &amp;a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;b:%d\\n\"</span>, &amp;b);</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">案例<span class=\"number\">2</span>：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main41</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;b = a; <span class=\"comment\">//const引用 使用变量a初始化</span></span><br><span class=\"line\">\ta = <span class=\"number\">11</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//b = 12; //通过引用修改a,对不起修改不了</span></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Teacher1</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">char</span> name[<span class=\"number\">64</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printTe2</span><span class=\"params\">(<span class=\"keyword\">const</span> Teacher1 *<span class=\"keyword\">const</span> pt)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//const引用让变量(所指内存空间)拥有只读属性</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printTe</span><span class=\"params\">(<span class=\"keyword\">const</span> Teacher1 &amp;t)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//t.age  = 11;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main42</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\tTeacher1 t1;</span><br><span class=\"line\">\tt1.age = <span class=\"number\">33</span>;</span><br><span class=\"line\">\tprintTe(t1);</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-使用字面量常量初始化const引用\"><a href=\"#2-使用字面量常量初始化const引用\" class=\"headerlink\" title=\"2 使用字面量常量初始化const引用\"></a>2 使用字面量常量初始化const引用</h2><p><strong><em>思考：</em></strong></p>\n<ul>\n<li>用变量对const引用初始化，const引用分配内存空间了吗？</li>\n<li>用常量对const引用初始化，const引用分配内存空间了吗？<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> b = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"b:%d\"</span>, &amp;b);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//int &amp;a1 = 19; 如果不加const编译失败</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;a = <span class=\"number\">19</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"&amp;a:%d \\n\"</span>, &amp;a);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"3-综合案例\"><a href=\"#3-综合案例\" class=\"headerlink\" title=\"3 综合案例\"></a>3 综合案例</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//普通引用</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> &amp;b = a;</span><br><span class=\"line\">\t<span class=\"comment\">//常量引用 ：让变量引用只读属性</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;c = a;  </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//常量引用初始化 分为两种</span></span><br><span class=\"line\">\t<span class=\"comment\">//1 用变量 初始化 常量引用</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">20</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; y = x;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"y:%d \\n\"</span>, y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2 用常量 初始化 常量引用</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//int &amp;m = 10; //引用是内存空间的别名 字面量10没有内存空间 没有方法做引用</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> &amp;m = <span class=\"number\">10</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello...\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"三-const引用结论\"><a href=\"#三-const引用结论\" class=\"headerlink\" title=\"三. const引用结论\"></a>三. const引用结论</h1><ul>\n<li><code>Const &amp; int e</code> 相当于 <code>const int * const e</code></li>\n<li>普通引用 相当于 <code>int *const e1</code></li>\n<li>当使用常量（字面量）对const引用进行初始化时，C++编译器会为常量值分配空间，并将引用名作为这段空间的别名</li>\n<li>使用字面量对const引用初始化后，将生成一个只读变量</li>\n</ul>\n<h1 id=\"四-const修饰类\"><a href=\"#四-const修饰类\" class=\"headerlink\" title=\"四. const修饰类\"></a>四. const修饰类</h1><pre><code>后面再看\n</code></pre><h1 id=\"五-综合练习\"><a href=\"#五-综合练习\" class=\"headerlink\" title=\"五. 综合练习\"></a>五. 综合练习</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>&amp; <span class=\"title\">j</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>&amp; <span class=\"title\">g</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = g();</span><br><span class=\"line\">\t<span class=\"keyword\">int</span>&amp; b = g();</span><br><span class=\"line\">\tj() = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d\\n\"</span>, a);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"b = %d\\n\"</span>, b);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"f() = %d\\n\"</span>, f());</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":[{"name":"面向对象编程","slug":"面向对象编程","count":7,"path":"api/categories/面向对象编程.json"}],"tags":[{"name":"Cpp对C的扩展","slug":"Cpp对C的扩展","count":7,"path":"api/tags/Cpp对C的扩展.json"}]}