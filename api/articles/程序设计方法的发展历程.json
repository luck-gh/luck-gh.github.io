{"title":"程序设计方法的发展历程","slug":"程序设计方法的发展历程","date":"2017-04-11T10:21:27.000Z","updated":"2018-04-22T09:57:42.664Z","comments":true,"path":"api/articles/程序设计方法的发展历程.json","photos":[],"link":"","excerpt":"面向过程的结构化程序设计方法设计思路<br>    –自顶向下、逐步求精。采用模块分解与功能抽象，自顶向下、分而治之。","covers":null,"content":"<h1 id=\"面向过程的结构化程序设计方法\"><a href=\"#面向过程的结构化程序设计方法\" class=\"headerlink\" title=\"面向过程的结构化程序设计方法\"></a>面向过程的结构化程序设计方法</h1><p>设计思路<br>    –自顶向下、逐步求精。采用模块分解与功能抽象，自顶向下、分而治之。</p>\n<a id=\"more\"></a>\n<p>程序结构：<br>    –按功能划分为若干个基本模块，形成一个树状结构。<br>    –各模块间的关系尽可能简单，功能上相对独立；每一模块内部均是由顺序、选择和循环三种基本结构组成。<br>    –其模块化实现的具体方法是使用子程序。<br>优点：<br>    有效地将一个较复杂的程序系统设计任务分解成许多易于控制和处理的子任务，便于开发和维护。<br>缺点：可重用性差、数据安全性差、难以开发大型软件和图形界面的应用软件<br>    –把数据和处理数据的过程分离为相互独立的实体。<br>    –当数据结构改变时，所有相关的处理过程都要进行相应的修改。<br>    –每一种相对于老问题的新方法都要带来额外的开销。<br>    –图形用户界面的应用程序，很难用过程来描述和实现，开发和维护也都很困难。</p>\n<h1 id=\"面向对象的方法\"><a href=\"#面向对象的方法\" class=\"headerlink\" title=\"面向对象的方法\"></a>面向对象的方法</h1><p>–将数据及对数据的操作方法封装在一起，作为一个相互依存、不可分离的整体——对象。<br>–对同类型对象抽象出其共性，形成类。<br>–类通过一个简单的外部接口，与外界发生关系。<br>–对象与对象之间通过消息进行通信。</p>\n<h1 id=\"面向对象的基本概念\"><a href=\"#面向对象的基本概念\" class=\"headerlink\" title=\"面向对象的基本概念\"></a>面向对象的基本概念</h1><h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><p>一般意义上的对象：<br>    –是现实世界中一个实际存在的事物。<br>    –可以是有形的（比如一辆汽车），也可以是无形的（比如一项计划）。<br>    –是构成世界的一个独立单位，具有<br>        静态特征：可以用某种数据来描述<br>        动态特征：对象所表现的行为或具有的功能<br>面向对象方法中的对象：<br>    –是系统中用来描述客观事物的一个实体，它是用来构成系统的一个基本单位。对象由一组属性和一组行为构成。<br>    –属性：用来描述对象静态特征的数据项。<br>    –行为：用来描述对象动态特征的操作序列。</p>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>分类——人类通常的思维方法<br>分类所依据的原则——抽象<br>    –忽略事物的非本质特征，只注意那些与当前目标有关的本质特征，从而找出事物的共性，把具有共同性质的事物划分为一类，得出一个抽象的概念。<br>    –例如，石头、树木、汽车、房屋等都是人们在长期的生产和生活实践中抽象出的概念。<br>面向对象方法中的”类”<br>    –具有相同属性和服务的一组对象的集合<br>    –为属于该类的全部对象提供了抽象的描述，包括属性和行为两个主要部分。<br>    –类与对象的关系：犹如模具与铸件之间的关系，一个属于某类的对象称为该类的一个实例。</p>\n<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><p>也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。<br>    把对象的属性和服务结合成一个独立的系统单元。<br>    尽可能隐蔽对象的内部细节。对外形成一个边界（或者说一道屏障），只保留有限的对外接口使之与外部发生联系。<br>    继承对于软件复用有着重要意义，是面向对象技术能够提高软件开发效率的重要原因之一。<br>    定义：特殊类的对象拥有其一般类的全部属性与服务，称作特殊类对一般类的继承。<br>    例如：将轮船作为一个一般类，客轮便是一个特殊类。</p>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><p>多态是指在一般类中定义的属性或行为，被特殊类继承之后，可以具有不同的数据类型或表现出不同的行为。这使得同一个属性或行为在一般类及其各个特殊类中具有不同的语义。</p>\n<h2 id=\"面向对象的软件工程\"><a href=\"#面向对象的软件工程\" class=\"headerlink\" title=\"面向对象的软件工程\"></a>面向对象的软件工程</h2><p>面向对象的软件工程是面向对象方法在软件工程领域的全面应用。它包括:<br>    –面向对象的分析（OOA）<br>    –面向对象的设计（OOD）<br>    –面向对象的编程（OOP）<br>    –面向对象的测试（OOT）<br>    –面向对象的软件维护（OOSM）<br><strong>总结：</strong><br>面向过程程序设计：数据结构 + 算法<br>主要解决科学计算问题，用户需求简单而固定<br><strong>特点：</strong><br>分析解决问题所需要的步骤<br>利用函数实现各个步骤<br>依次调用函数解决问题<br><strong>问题：</strong><br>软件可重用性差<br>软件可维护性差<br>构建的软件无法满足用户需求</p>\n<p>面向对象程序设计：由现实世界建立软件模型<br>将现实世界中的事物直接映射到程序中，可直接满足用户需求<br><strong>特点：</strong><br>直接分析用户需求中涉及的各个实体<br>在代码中描述现实世界中的实体<br>在代码中关联各个实体协同工作解决问题<br><strong>优势：</strong><br>构建的软件能够适应用户需求的不断变化<br>直接利用面向过程方法的优势而避开其劣势</p>\n","categories":[{"name":"面向对象编程","slug":"面向对象编程","count":6,"path":"api/categories/面向对象编程.json"}],"tags":[{"name":"Cpp对C的扩展","slug":"Cpp对C的扩展","count":6,"path":"api/tags/Cpp对C的扩展.json"}]}