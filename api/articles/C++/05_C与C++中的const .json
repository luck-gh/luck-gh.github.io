{"title":"05_C与C++中的const","slug":"C++/05_C与C++中的const ","date":"2017-04-15T09:16:24.000Z","updated":"2018-05-06T16:26:04.163Z","comments":true,"path":"api/articles/C++/05_C与C++中的const .json","photos":[],"link":"","excerpt":"1 const基础知识（用法、含义、好处） √<br>2 C中“冒牌货” √<br>3 const和#define相同之处 √<br>4 const和#define的区别 √<br>5 结论 √<br>","covers":null,"content":"<p><strong>1 const基础知识（用法、含义、好处）</strong> √<br><strong>2 C中“冒牌货”</strong> √<br><strong>3 const和#define相同之处</strong> √<br><strong>4 const和#define的区别</strong> √<br><strong>5 结论</strong> √<br><a id=\"more\"></a></p>\n<h1 id=\"一-const基础知识（用法、含义、好处）\"><a href=\"#一-const基础知识（用法、含义、好处）\" class=\"headerlink\" title=\"一. const基础知识（用法、含义、好处）\"></a>一. const基础知识（用法、含义、好处）</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> <span class=\"keyword\">const</span> b;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> *c;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> d;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> * <span class=\"keyword\">const</span> e ;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Int <span class=\"title\">func1</span><span class=\"params\">(<span class=\"keyword\">const</span>)</span></span></span><br></pre></td></tr></table></figure>\n<p>初级理解：const是定义常量==》const意味着只读</p>\n<ul>\n<li>含义：<br>  第一个第二个意思一样 代表一个常整形数<br>  第三个 c是一个指向常整形数的指针(所指向的内存数据不能被修改，但是本身可以修改)<br>  第四个 d 常指针（指针变量不能被修改，但是它所指向内存空间可以被修改）<br>  第五个 e一个指向常整形的常指针（指针和它所指向的内存空间，均不能被修改）</li>\n<li>Const好处<br>  合理的利用const，<br>  1指针做函数参数，可以有效的提高代码可读性，减少bug；<br>  2清楚的分清参数的输入和输出特性</li>\n<li><code>int setTeacher_err( const Teacher *p)</code><br>  Const修改形参的时候，在利用形参不能修改指针所向的内存空间</li>\n</ul>\n<hr>\n<h1 id=\"二-C中“冒牌货”\"><a href=\"#二-C中“冒牌货”\" class=\"headerlink\" title=\"二. C中“冒牌货”\"></a>二. C中“冒牌货”</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *p = (<span class=\"keyword\">int</span>*)&amp;a; </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a===&gt;%d\\n\"</span>, a);</span><br><span class=\"line\">\t*p = <span class=\"number\">11</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a===&gt;%d\\n\"</span>, a);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Hello......\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解释：<br>C++编译器对const常量的处理<br>当碰见常量声明时，在符号表中放入常量 –&gt; <strong><em>问题：如何解释取地址</em></strong><br>编译过程中若发现使用常量则直接以符号表中的值替换<br>编译过程中若发现对<code>const</code>使用了<code>extern</code>或者<code>&amp;</code>操作符，则给对应的常量分配存储空间（兼容C）<br>？联想： int &amp;a = 1(err) &amp; const int &amp;a = 10(ok)? </li>\n<li>注意：<br>C++编译器虽然可能为const常量分配空间，但不会使用其存储空间中的值。</li>\n</ul>\n<p><strong><em>结论：</em></strong></p>\n<ul>\n<li>C语言中的const变量<br>C语言中const变量是只读变量，有自己的存储空间</li>\n<li>C++中的const常量<br>可能分配存储空间,也可能不分配存储空间<br>当const常量为全局，并且需要在其它文件中使用<br>当使用&amp;操作符取const常量的地址</li>\n</ul>\n<hr>\n<h1 id=\"三-const和-define相同之处\"><a href=\"#三-const和-define相同之处\" class=\"headerlink\" title=\"三. const和#define相同之处\"></a>三. const和#define相同之处</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//练习 解释为什么</span></span><br><span class=\"line\"><span class=\"comment\">//#define N 10 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a = <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> b = <span class=\"number\">2</span>; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[a + b ] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;(a+b); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"array[%d] = %d\\n\"</span>, i, <span class=\"built_in\">array</span>[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>C++中的const修饰的，是一个真正的常量，而不是C中变量（只读）。在const修饰的常量编译期间，就已经确定下来了。</li>\n</ul>\n<hr>\n<h1 id=\"四-const和-define的区别\"><a href=\"#四-const和-define的区别\" class=\"headerlink\" title=\"四. const和#define的区别\"></a>四. const和#define的区别</h1><ul>\n<li>对比加深</li>\n<li>C++中的const常量类似于宏定义<br>const int c = 5; ≈ #define c 5</li>\n<li>C++中的const常量与宏定义不同<br>const常量是由编译器处理的，提供类型检查和作用域检查<br>宏定义由预处理器处理，单纯的文本替换</li>\n</ul>\n<p><strong><em>问题：</em></strong><br>    在func1定义a，在func2中能使用吗？<br>    在func1中定义的b，在func2中能使用吗？<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//练习</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun1</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> a 10</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> b = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"comment\">//#undef a  # undef</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">fun2</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d\\n\"</span>, a);</span><br><span class=\"line\">    <span class=\"comment\">//printf(\"b = %d\\n\", b);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    fun1();</span><br><span class=\"line\">    fun2();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"五-结论\"><a href=\"#五-结论\" class=\"headerlink\" title=\"五. 结论\"></a>五. 结论</h1><ul>\n<li>C语言中的const变量<br>C语言中const变量是只读变量，有自己的存储空间</li>\n<li>C++中的const常量<br>可能分配存储空间,也可能不分配存储空间<br>当const常量为全局，并且需要在其它文件中使用，会分配存储空间<br>当使用&amp;操作符，取const常量的地址时，会分配存储空间<br>当<code>const int &amp;a = 10; const</code>修饰引用时，也会分配存储空间</li>\n</ul>\n","categories":[{"name":"面向对象编程","slug":"面向对象编程","count":8,"path":"api/categories/面向对象编程.json"}],"tags":[{"name":"Cpp对C的扩展","slug":"Cpp对C的扩展","count":8,"path":"api/tags/Cpp对C的扩展.json"}]}