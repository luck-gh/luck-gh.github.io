{"title":"07_C++对C的函数扩展","slug":"C++/07_C++对C的函数扩展 ","date":"2017-04-18T07:20:56.000Z","updated":"2018-05-06T16:24:18.845Z","comments":true,"path":"api/articles/C++/07_C++对C的函数扩展 .json","photos":[],"link":"","excerpt":"1 inline内联函数 √<br>2 默认参数 √<br>3 函数占位参数 √<br>4 默认参数和占位参数 √<br>5 函数重载（Overroad） √","covers":null,"content":"<p><strong>1 inline内联函数</strong> √<br><strong>2 默认参数</strong> √<br><strong>3 函数占位参数</strong> √<br><strong>4 默认参数和占位参数</strong> √<br><strong>5 函数重载（Overroad）</strong> √</p>\n<a id=\"more\"></a>\n<h1 id=\"一-inline内联函数\"><a href=\"#一-inline内联函数\" class=\"headerlink\" title=\"一. inline内联函数\"></a>一. inline内联函数</h1><ul>\n<li>C++中的const常量可以替代宏常数定义，如：<br><code>const int A = 3;  #define A 3</code><br>C++中是否有解决方案替代宏代码片段呢？（替代宏代码片段就可以避免宏的副作用！）</li>\n<li>C++中推荐使用内联函数替代宏代码片段<br>C++中使用inline关键字声明内联函数</li>\n<li>内联函数声明时inline关键字必须和函数定义结合在一起，否则编译器会直接忽略内联请求。<br>//宏替换和函数调用区别<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"iostream\"</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MYFUNC(a, b) ((a) &lt; (b) ? (a) : (b))  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">myfunc</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span>  </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a &lt; b ? a : b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//int c = myfunc(++a, b);  //头疼系统</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c = MYFUNC(++a, b);  </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"a = %d\\n\"</span>, a); </span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"b = %d\\n\"</span>, b);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"c = %d\\n\"</span>, c);</span><br><span class=\"line\"></span><br><span class=\"line\">system(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"注意-1：\"><a href=\"#注意-1：\" class=\"headerlink\" title=\"注意 1：\"></a>注意 1：</h2><ul>\n<li>声明必须和函数体的实现，写在一块(inline不能声明)<br>(可以声明但是编译器不一定当内联函数处理)</li>\n</ul>\n<h2 id=\"注意-2：\"><a href=\"#注意-2：\" class=\"headerlink\" title=\"注意 2：\"></a>注意 2：</h2><ul>\n<li>C++编译器可以将一个函数进行内联编译</li>\n<li>被C++编译器内联编译的函数叫做内联函数</li>\n<li>内联函数在最终生成的代码中是没有定义的</li>\n<li><strong><em>C++编译器直接将函数体插入在函数调用的地方</em></strong> </li>\n<li>内联函数没有普通函数调用时的额外开销(压栈，跳转，返回)</li>\n</ul>\n<h2 id=\"注意-3：\"><a href=\"#注意-3：\" class=\"headerlink\" title=\"注意 3：\"></a>注意 3：</h2><ul>\n<li>C++编译器不一定准许函数的内联请求！</li>\n</ul>\n<h2 id=\"注意-4：\"><a href=\"#注意-4：\" class=\"headerlink\" title=\"注意 4：\"></a>注意 4：</h2><ul>\n<li>内联函数是一种特殊的函数，具有普通函数的特征（参数检查，返回类型等）</li>\n<li>内联函数是对编译器的一种请求，因此编译器可能拒绝这种请求</li>\n<li>内联函数由 编译器处理，直接将编译后的函数体插入调用的地方</li>\n<li>宏代码片段 由预处理器处理， 进行简单的文本替换，没有任何编译过程</li>\n</ul>\n<h2 id=\"注意-5：\"><a href=\"#注意-5：\" class=\"headerlink\" title=\"注意 5：\"></a>注意 5：</h2><ul>\n<li>现代C++编译器能够进行编译优化，因此一些函数即使没有inline声明，也可能被编译器内联编译<br>  另外，一些现代C++编译器提供了扩展语法，能够对函数进行强制内联<br>  如：g++中的<code>__attribute__((always_inline))</code>属性</li>\n</ul>\n<h2 id=\"注意-6：\"><a href=\"#注意-6：\" class=\"headerlink\" title=\"注意 6：\"></a>注意 6：</h2><ul>\n<li>C++中内联编译的限制：</li>\n<li>不能存在任何形式的循环语句    </li>\n<li>不能存在过多的条件判断语句</li>\n<li>函数体不能过于庞大</li>\n<li>不能对函数进行取址操作</li>\n<li>函数内联声明必须在调用语句之前</li>\n</ul>\n<h2 id=\"注意-7：\"><a href=\"#注意-7：\" class=\"headerlink\" title=\"注意 7：\"></a>注意 7：</h2><ul>\n<li>编译器对于内联函数的限制并不是绝对的，内联函数相对于普通函数的优势只是省去了函数调用时压栈，跳转和返回的开销。<br>  因此，当函数体的执行开销远大于压栈，跳转和返回所用的开销时，那么内联将无意义。</li>\n</ul>\n<h2 id=\"结论：\"><a href=\"#结论：\" class=\"headerlink\" title=\"结论：\"></a>结论：</h2><ul>\n<li><strong><em>内联函数在编译时直接将函数体插入函数调用的地方</em></strong></li>\n<li>inline只是一种请求，编译器不一定允许这种请求</li>\n<li>内联函数省去了普通函数调用时压栈，跳转和返回的开销 </li>\n</ul>\n<hr>\n<h1 id=\"二-默认参数\"><a href=\"#二-默认参数\" class=\"headerlink\" title=\"二. 默认参数\"></a>二. 默认参数</h1><h2 id=\"1-什么是默认参数\"><a href=\"#1-什么是默认参数\" class=\"headerlink\" title=\"1 什么是默认参数\"></a>1 什么是默认参数</h2><ul>\n<li>C++中可以在函数声明时为参数提供一个默认值，<br>当函数调用时没有指定这个参数的值，编译器会自动用默认值代替</li>\n</ul>\n<p>如下：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myPrint</span><span class=\"params\">(<span class=\"keyword\">int</span> x = <span class=\"number\">3</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"x:%d\"</span>, x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-函数默认参数的规则\"><a href=\"#2-函数默认参数的规则\" class=\"headerlink\" title=\"2 函数默认参数的规则\"></a>2 函数默认参数的规则</h2><ul>\n<li>只有参数列表后面部分的参数才可以提供默认参数值</li>\n<li><strong><em>一旦在一个函数调用中开始使用默认参数值，那么这个参数后的所有参数都必须使用默认参数值</em></strong></li>\n</ul>\n<p>如下：<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">printABC</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> x = <span class=\"number\">3</span>, <span class=\"keyword\">int</span> y=<span class=\"number\">4</span>, <span class=\"keyword\">int</span> z = <span class=\"number\">5</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"x:%d\\n\"</span>, x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span> </span>&#123;</span><br><span class=\"line\">\tprintAB(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tprintAB();</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h1 id=\"三-函数占位参数\"><a href=\"#三-函数占位参数\" class=\"headerlink\" title=\"三. 函数占位参数\"></a>三. 函数占位参数</h1><ul>\n<li>占位参数只有参数类型声明，而没有参数名声明</li>\n<li>一般情况下，在函数体内部无法使用占位参数<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> )</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//func(1, 2); //可以吗？</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"func(1, 2, 3) = %d\\n\"</span>, func(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\tgetchar();\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h1 id=\"四-默认参数和占位参数\"><a href=\"#四-默认参数和占位参数\" class=\"headerlink\" title=\"四. 默认参数和占位参数\"></a>四. 默认参数和占位参数</h1><ul>\n<li>可以将占位参数与默认参数结合起来使用</li>\n<li>意义:<br>  为以后程序的扩展留下线索<br>  兼容C语言程序中可能出现的不规范写法</li>\n<li>C++可以声明占位符参数，占位符参数一般用于程序扩展和对C代码的兼容<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func2</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果默认参数和占位参数在一起，都能调用起来</span></span><br><span class=\"line\">\tfunc2(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\tfunc2(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong><em>结论：</em></strong><br>    如果默认参数和占位参数在一起，都能调用起来</p>\n<hr>\n<h1 id=\"五-函数重载（Overroad）\"><a href=\"#五-函数重载（Overroad）\" class=\"headerlink\" title=\"五. 函数重载（Overroad）\"></a>五. 函数重载（Overroad）</h1><h2 id=\"1-函数重载概念\"><a href=\"#1-函数重载概念\" class=\"headerlink\" title=\"1 函数重载概念\"></a>1 函数重载概念</h2><h3 id=\"1-1-概念\"><a href=\"#1-1-概念\" class=\"headerlink\" title=\"1.1 概念\"></a>1.1 概念</h3><ul>\n<li>函数重载(Function Overload)<br>  用同一个函数名定义不同的函数<br>  当函数名和不同的参数搭配时函数的含义不同</li>\n</ul>\n<h3 id=\"1-2-函数重载的判断标准\"><a href=\"#1-2-函数重载的判断标准\" class=\"headerlink\" title=\"1.2 函数重载的判断标准\"></a>1.2 函数重载的判断标准</h3><ul>\n<li>函数重载至少满足下面的一个条件：<br>  参数个数不同<br>  参数类型不同<br>  参数顺序不同</li>\n</ul>\n<h3 id=\"1-3-函数返回值不是函数重载的判断标准\"><a href=\"#1-3-函数返回值不是函数重载的判断标准\" class=\"headerlink\" title=\"1.3 函数返回值不是函数重载的判断标准\"></a>1.3 函数返回值不是函数重载的判断标准</h3><ul>\n<li>实验1：调用情况分析；实验2：判断标准</li>\n</ul>\n<p><strong><em>两个难点：重载函数和默认函数参数混搭 重载函数和函数指针</em></strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* s)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tc = func(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"c = %d\\n\"</span>, c);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tc = func(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"c = %d\\n\"</span>, c);</span><br><span class=\"line\"></span><br><span class=\"line\">\tc = func(<span class=\"string\">\"12345\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"c = %d\\n\"</span>, c);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Press enter to continue ...\"</span>);</span><br><span class=\"line\">\tgetchar();\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"2-函数重载的调用准则\"><a href=\"#2-函数重载的调用准则\" class=\"headerlink\" title=\"2 函数重载的调用准则\"></a>2 函数重载的调用准则</h2><ul>\n<li>编译器调用重载函数的准则<br>  将所有同名函数作为候选者<br>  尝试寻找可行的候选函数<ul>\n<li>精确匹配实参<br>通过默认参数能够匹配实参<br>通过默认类型转换匹配实参</li>\n<li>匹配失败<br>最终寻找到的可行候选函数不唯一，则出现二义性，编译失败。<br>无法匹配所有候选者，函数未定义，编译失败。</li>\n</ul>\n</li>\n<li>函数重载的注意事项<br>  <strong><em>重载函数在本质上是相互独立的不同函数（静态链编）</em></strong><br>  重载函数的函数类型是不同的<br>  函数返回值不能作为函数重载的依据<br>  函数重载是由函数名和参数列表决定的。</li>\n</ul>\n<p><strong><em>函数重载是发生在一个类中里面</em></strong></p>\n<h2 id=\"3-函数重载遇上函数默认参数\"><a href=\"#3-函数重载遇上函数默认参数\" class=\"headerlink\" title=\"3 函数重载遇上函数默认参数\"></a>3 函数重载遇上函数默认参数</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当函数默认参数遇上函数重载会发生什么</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> c = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a * b * c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1个参数的允许吗</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tc = func(<span class=\"number\">1</span>, <span class=\"number\">2</span>); <span class=\"comment\">// 存在二义性，调用失败，编译不能通过 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"c = %d\\n\"</span>, c);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Press enter to continue ...\"</span>);</span><br><span class=\"line\">\tgetchar();\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-函数重载和函数指针结合\"><a href=\"#4-函数重载和函数指针结合\" class=\"headerlink\" title=\"4 函数重载和函数指针结合\"></a>4 函数重载和函数指针结合</h2><ul>\n<li>函数重载 与 函数指针<br>  当使用重载函数名对函数指针进行赋值时<br>  根据重载规则挑选与函数指针参数列表一致的候选者<br>  严格匹配候选者的函数类型与函数指针的函数类型<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// int(int a)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span>  </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* s)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">typedef</span> <span class=\"title\">int</span><span class=\"params\">(*PFUNC)</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>; <span class=\"comment\">// int(int a)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tPFUNC p = func;</span><br><span class=\"line\">\tc = p(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">//c = p(1,3); //错误</span></span><br><span class=\"line\">    <span class=\"comment\">//p(&amp;c);  //错误</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"c = %d\\n\"</span>, c);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Press enter to continue ...\"</span>);</span><br><span class=\"line\">\tgetchar();\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>函数重载、重写、重定义：后面看</strong></p>\n","categories":[{"name":"面向对象编程","slug":"面向对象编程","count":8,"path":"api/categories/面向对象编程.json"}],"tags":[{"name":"Cpp对C的扩展","slug":"Cpp对C的扩展","count":8,"path":"api/tags/Cpp对C的扩展.json"}]}